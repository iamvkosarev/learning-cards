// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: learning_cards/v1/review.proto

package learning_cards

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetGroupReviewInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupReviewInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupReviewInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupReviewInfoRequestMultiError, or nil if none found.
func (m *GetGroupReviewInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupReviewInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GetGroupReviewInfoRequestMultiError(errors)
	}

	return nil
}

// GetGroupReviewInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetGroupReviewInfoRequest.ValidateAll() if the
// designated constraints aren't met.
type GetGroupReviewInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupReviewInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupReviewInfoRequestMultiError) AllErrors() []error { return m }

// GetGroupReviewInfoRequestValidationError is the validation error returned by
// GetGroupReviewInfoRequest.Validate if the designated constraints aren't met.
type GetGroupReviewInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupReviewInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupReviewInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupReviewInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupReviewInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupReviewInfoRequestValidationError) ErrorName() string {
	return "GetGroupReviewInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupReviewInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupReviewInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupReviewInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupReviewInfoRequestValidationError{}

// Validate checks the field values on GetGroupReviewInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGroupReviewInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGroupReviewInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGroupReviewInfoResponseMultiError, or nil if none found.
func (m *GetGroupReviewInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGroupReviewInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CardsCount

	if len(errors) > 0 {
		return GetGroupReviewInfoResponseMultiError(errors)
	}

	return nil
}

// GetGroupReviewInfoResponseMultiError is an error wrapping multiple
// validation errors returned by GetGroupReviewInfoResponse.ValidateAll() if
// the designated constraints aren't met.
type GetGroupReviewInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGroupReviewInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGroupReviewInfoResponseMultiError) AllErrors() []error { return m }

// GetGroupReviewInfoResponseValidationError is the validation error returned
// by GetGroupReviewInfoResponse.Validate if the designated constraints aren't met.
type GetGroupReviewInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupReviewInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupReviewInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupReviewInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupReviewInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupReviewInfoResponseValidationError) ErrorName() string {
	return "GetGroupReviewInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupReviewInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupReviewInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupReviewInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupReviewInfoResponseValidationError{}

// Validate checks the field values on UpdateGroupReviewInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGroupReviewInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGroupReviewInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGroupReviewInfoRequestMultiError, or nil if none found.
func (m *UpdateGroupReviewInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGroupReviewInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for CardsCount

	if len(errors) > 0 {
		return UpdateGroupReviewInfoRequestMultiError(errors)
	}

	return nil
}

// UpdateGroupReviewInfoRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateGroupReviewInfoRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateGroupReviewInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGroupReviewInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGroupReviewInfoRequestMultiError) AllErrors() []error { return m }

// UpdateGroupReviewInfoRequestValidationError is the validation error returned
// by UpdateGroupReviewInfoRequest.Validate if the designated constraints
// aren't met.
type UpdateGroupReviewInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupReviewInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupReviewInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupReviewInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupReviewInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupReviewInfoRequestValidationError) ErrorName() string {
	return "UpdateGroupReviewInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupReviewInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupReviewInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupReviewInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupReviewInfoRequestValidationError{}

// Validate checks the field values on MakeReviewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MakeReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MakeReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MakeReviewRequestMultiError, or nil if none found.
func (m *MakeReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MakeReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return MakeReviewRequestMultiError(errors)
	}

	return nil
}

// MakeReviewRequestMultiError is an error wrapping multiple validation errors
// returned by MakeReviewRequest.ValidateAll() if the designated constraints
// aren't met.
type MakeReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MakeReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MakeReviewRequestMultiError) AllErrors() []error { return m }

// MakeReviewRequestValidationError is the validation error returned by
// MakeReviewRequest.Validate if the designated constraints aren't met.
type MakeReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakeReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakeReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakeReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakeReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakeReviewRequestValidationError) ErrorName() string {
	return "MakeReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MakeReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakeReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakeReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakeReviewRequestValidationError{}

// Validate checks the field values on MakeReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MakeReviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MakeReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MakeReviewResponseMultiError, or nil if none found.
func (m *MakeReviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MakeReviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MakeReviewResponseValidationError{
						field:  fmt.Sprintf("Cards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MakeReviewResponseValidationError{
						field:  fmt.Sprintf("Cards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MakeReviewResponseValidationError{
					field:  fmt.Sprintf("Cards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MakeReviewResponseMultiError(errors)
	}

	return nil
}

// MakeReviewResponseMultiError is an error wrapping multiple validation errors
// returned by MakeReviewResponse.ValidateAll() if the designated constraints
// aren't met.
type MakeReviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MakeReviewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MakeReviewResponseMultiError) AllErrors() []error { return m }

// MakeReviewResponseValidationError is the validation error returned by
// MakeReviewResponse.Validate if the designated constraints aren't met.
type MakeReviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MakeReviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MakeReviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MakeReviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MakeReviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MakeReviewResponseValidationError) ErrorName() string {
	return "MakeReviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MakeReviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMakeReviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MakeReviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MakeReviewResponseValidationError{}

// Validate checks the field values on ReviewCardResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReviewCardResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewCardResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewCardResultMultiError, or nil if none found.
func (m *ReviewCardResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewCardResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CardId

	// no validation rules for CardAnswer

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReviewCardResultValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReviewCardResultValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReviewCardResultValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReviewCardResultMultiError(errors)
	}

	return nil
}

// ReviewCardResultMultiError is an error wrapping multiple validation errors
// returned by ReviewCardResult.ValidateAll() if the designated constraints
// aren't met.
type ReviewCardResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewCardResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewCardResultMultiError) AllErrors() []error { return m }

// ReviewCardResultValidationError is the validation error returned by
// ReviewCardResult.Validate if the designated constraints aren't met.
type ReviewCardResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewCardResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewCardResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewCardResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewCardResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewCardResultValidationError) ErrorName() string { return "ReviewCardResultValidationError" }

// Error satisfies the builtin error interface
func (e ReviewCardResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewCardResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewCardResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewCardResultValidationError{}

// Validate checks the field values on CompleteReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteReviewRequestMultiError, or nil if none found.
func (m *CompleteReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	for idx, item := range m.GetCardResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompleteReviewRequestValidationError{
						field:  fmt.Sprintf("CardResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompleteReviewRequestValidationError{
						field:  fmt.Sprintf("CardResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompleteReviewRequestValidationError{
					field:  fmt.Sprintf("CardResults[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CheckDuration

	if len(errors) > 0 {
		return CompleteReviewRequestMultiError(errors)
	}

	return nil
}

// CompleteReviewRequestMultiError is an error wrapping multiple validation
// errors returned by CompleteReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type CompleteReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteReviewRequestMultiError) AllErrors() []error { return m }

// CompleteReviewRequestValidationError is the validation error returned by
// CompleteReviewRequest.Validate if the designated constraints aren't met.
type CompleteReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteReviewRequestValidationError) ErrorName() string {
	return "CompleteReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteReviewRequestValidationError{}
