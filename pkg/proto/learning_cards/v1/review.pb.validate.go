// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: learning_cards/v1/review.proto

package learning_cards

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetReviewCardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewCardsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewCardsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewCardsRequestMultiError, or nil if none found.
func (m *GetReviewCardsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewCardsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if m.GetCardsCount() <= 0 {
		err := GetReviewCardsRequestValidationError{
			field:  "CardsCount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReviewCardsRequestMultiError(errors)
	}

	return nil
}

// GetReviewCardsRequestMultiError is an error wrapping multiple validation
// errors returned by GetReviewCardsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetReviewCardsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewCardsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewCardsRequestMultiError) AllErrors() []error { return m }

// GetReviewCardsRequestValidationError is the validation error returned by
// GetReviewCardsRequest.Validate if the designated constraints aren't met.
type GetReviewCardsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewCardsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewCardsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewCardsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewCardsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewCardsRequestValidationError) ErrorName() string {
	return "GetReviewCardsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewCardsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewCardsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewCardsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewCardsRequestValidationError{}

// Validate checks the field values on ReviewCard with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReviewCard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewCard with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReviewCardMultiError, or
// nil if none found.
func (m *ReviewCard) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewCard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FrontText

	// no validation rules for BackText

	if len(errors) > 0 {
		return ReviewCardMultiError(errors)
	}

	return nil
}

// ReviewCardMultiError is an error wrapping multiple validation errors
// returned by ReviewCard.ValidateAll() if the designated constraints aren't met.
type ReviewCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewCardMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewCardMultiError) AllErrors() []error { return m }

// ReviewCardValidationError is the validation error returned by
// ReviewCard.Validate if the designated constraints aren't met.
type ReviewCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewCardValidationError) ErrorName() string { return "ReviewCardValidationError" }

// Error satisfies the builtin error interface
func (e ReviewCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewCardValidationError{}

// Validate checks the field values on GetReviewCardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewCardsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewCardsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewCardsResponseMultiError, or nil if none found.
func (m *GetReviewCardsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewCardsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReviewCardsResponseValidationError{
						field:  fmt.Sprintf("Cards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReviewCardsResponseValidationError{
						field:  fmt.Sprintf("Cards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReviewCardsResponseValidationError{
					field:  fmt.Sprintf("Cards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFullCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReviewCardsResponseValidationError{
						field:  fmt.Sprintf("FullCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReviewCardsResponseValidationError{
						field:  fmt.Sprintf("FullCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReviewCardsResponseValidationError{
					field:  fmt.Sprintf("FullCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReviewCardsResponseMultiError(errors)
	}

	return nil
}

// GetReviewCardsResponseMultiError is an error wrapping multiple validation
// errors returned by GetReviewCardsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetReviewCardsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewCardsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewCardsResponseMultiError) AllErrors() []error { return m }

// GetReviewCardsResponseValidationError is the validation error returned by
// GetReviewCardsResponse.Validate if the designated constraints aren't met.
type GetReviewCardsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewCardsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewCardsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewCardsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewCardsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewCardsResponseValidationError) ErrorName() string {
	return "GetReviewCardsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewCardsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewCardsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewCardsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewCardsResponseValidationError{}

// Validate checks the field values on ReviewCardResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReviewCardResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewCardResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewCardResultMultiError, or nil if none found.
func (m *ReviewCardResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewCardResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CardId

	// no validation rules for CardAnswer

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReviewCardResultValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReviewCardResultValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReviewCardResultValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReviewCardResultMultiError(errors)
	}

	return nil
}

// ReviewCardResultMultiError is an error wrapping multiple validation errors
// returned by ReviewCardResult.ValidateAll() if the designated constraints
// aren't met.
type ReviewCardResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewCardResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewCardResultMultiError) AllErrors() []error { return m }

// ReviewCardResultValidationError is the validation error returned by
// ReviewCardResult.Validate if the designated constraints aren't met.
type ReviewCardResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewCardResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewCardResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewCardResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewCardResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewCardResultValidationError) ErrorName() string { return "ReviewCardResultValidationError" }

// Error satisfies the builtin error interface
func (e ReviewCardResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewCardResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewCardResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewCardResultValidationError{}

// Validate checks the field values on AddReviewResultsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddReviewResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReviewResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddReviewResultsRequestMultiError, or nil if none found.
func (m *AddReviewResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReviewResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	for idx, item := range m.GetCardResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddReviewResultsRequestValidationError{
						field:  fmt.Sprintf("CardResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddReviewResultsRequestValidationError{
						field:  fmt.Sprintf("CardResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddReviewResultsRequestValidationError{
					field:  fmt.Sprintf("CardResults[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CheckDuration

	if len(errors) > 0 {
		return AddReviewResultsRequestMultiError(errors)
	}

	return nil
}

// AddReviewResultsRequestMultiError is an error wrapping multiple validation
// errors returned by AddReviewResultsRequest.ValidateAll() if the designated
// constraints aren't met.
type AddReviewResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReviewResultsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReviewResultsRequestMultiError) AllErrors() []error { return m }

// AddReviewResultsRequestValidationError is the validation error returned by
// AddReviewResultsRequest.Validate if the designated constraints aren't met.
type AddReviewResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReviewResultsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReviewResultsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReviewResultsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReviewResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReviewResultsRequestValidationError) ErrorName() string {
	return "AddReviewResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddReviewResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReviewResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReviewResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReviewResultsRequestValidationError{}

// Validate checks the field values on GetCardsProgressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCardsProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardsProgressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCardsProgressRequestMultiError, or nil if none found.
func (m *GetCardsProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardsProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return GetCardsProgressRequestMultiError(errors)
	}

	return nil
}

// GetCardsProgressRequestMultiError is an error wrapping multiple validation
// errors returned by GetCardsProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCardsProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardsProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardsProgressRequestMultiError) AllErrors() []error { return m }

// GetCardsProgressRequestValidationError is the validation error returned by
// GetCardsProgressRequest.Validate if the designated constraints aren't met.
type GetCardsProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardsProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardsProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardsProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardsProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardsProgressRequestValidationError) ErrorName() string {
	return "GetCardsProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCardsProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardsProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardsProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardsProgressRequestValidationError{}

// Validate checks the field values on CardProgress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardProgressMultiError, or
// nil if none found.
func (m *CardProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *CardProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CardId

	// no validation rules for Mark

	if len(errors) > 0 {
		return CardProgressMultiError(errors)
	}

	return nil
}

// CardProgressMultiError is an error wrapping multiple validation errors
// returned by CardProgress.ValidateAll() if the designated constraints aren't met.
type CardProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardProgressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardProgressMultiError) AllErrors() []error { return m }

// CardProgressValidationError is the validation error returned by
// CardProgress.Validate if the designated constraints aren't met.
type CardProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardProgressValidationError) ErrorName() string { return "CardProgressValidationError" }

// Error satisfies the builtin error interface
func (e CardProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardProgressValidationError{}

// Validate checks the field values on GetCardsProgressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCardsProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardsProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCardsProgressResponseMultiError, or nil if none found.
func (m *GetCardsProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardsProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCardsProgressResponseValidationError{
						field:  fmt.Sprintf("Cards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCardsProgressResponseValidationError{
						field:  fmt.Sprintf("Cards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCardsProgressResponseValidationError{
					field:  fmt.Sprintf("Cards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCardsProgressResponseMultiError(errors)
	}

	return nil
}

// GetCardsProgressResponseMultiError is an error wrapping multiple validation
// errors returned by GetCardsProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCardsProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardsProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardsProgressResponseMultiError) AllErrors() []error { return m }

// GetCardsProgressResponseValidationError is the validation error returned by
// GetCardsProgressResponse.Validate if the designated constraints aren't met.
type GetCardsProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardsProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardsProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardsProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardsProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardsProgressResponseValidationError) ErrorName() string {
	return "GetCardsProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCardsProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardsProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardsProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardsProgressResponseValidationError{}
