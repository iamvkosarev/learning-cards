// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: learning_cards/v1/progress.proto

package learning_cards

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GroupProgress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupProgressMultiError, or
// nil if none found.
func (m *GroupProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	// no validation rules for Mark

	if all {
		switch v := interface{}(m.GetLastReviewTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupProgressValidationError{
					field:  "LastReviewTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupProgressValidationError{
					field:  "LastReviewTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastReviewTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupProgressValidationError{
				field:  "LastReviewTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GroupProgressMultiError(errors)
	}

	return nil
}

// GroupProgressMultiError is an error wrapping multiple validation errors
// returned by GroupProgress.ValidateAll() if the designated constraints
// aren't met.
type GroupProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupProgressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupProgressMultiError) AllErrors() []error { return m }

// GroupProgressValidationError is the validation error returned by
// GroupProgress.Validate if the designated constraints aren't met.
type GroupProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupProgressValidationError) ErrorName() string { return "GroupProgressValidationError" }

// Error satisfies the builtin error interface
func (e GroupProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupProgressValidationError{}

// Validate checks the field values on ListGroupsProgressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupsProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupsProgressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupsProgressRequestMultiError, or nil if none found.
func (m *ListGroupsProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupsProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListGroupsProgressRequestMultiError(errors)
	}

	return nil
}

// ListGroupsProgressRequestMultiError is an error wrapping multiple validation
// errors returned by ListGroupsProgressRequest.ValidateAll() if the
// designated constraints aren't met.
type ListGroupsProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupsProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupsProgressRequestMultiError) AllErrors() []error { return m }

// ListGroupsProgressRequestValidationError is the validation error returned by
// ListGroupsProgressRequest.Validate if the designated constraints aren't met.
type ListGroupsProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupsProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupsProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupsProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupsProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupsProgressRequestValidationError) ErrorName() string {
	return "ListGroupsProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupsProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupsProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupsProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupsProgressRequestValidationError{}

// Validate checks the field values on ListGroupsProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGroupsProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGroupsProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGroupsProgressResponseMultiError, or nil if none found.
func (m *ListGroupsProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGroupsProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroupProgresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGroupsProgressResponseValidationError{
						field:  fmt.Sprintf("GroupProgresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGroupsProgressResponseValidationError{
						field:  fmt.Sprintf("GroupProgresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGroupsProgressResponseValidationError{
					field:  fmt.Sprintf("GroupProgresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGroupsProgressResponseMultiError(errors)
	}

	return nil
}

// ListGroupsProgressResponseMultiError is an error wrapping multiple
// validation errors returned by ListGroupsProgressResponse.ValidateAll() if
// the designated constraints aren't met.
type ListGroupsProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGroupsProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGroupsProgressResponseMultiError) AllErrors() []error { return m }

// ListGroupsProgressResponseValidationError is the validation error returned
// by ListGroupsProgressResponse.Validate if the designated constraints aren't met.
type ListGroupsProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGroupsProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGroupsProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGroupsProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGroupsProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGroupsProgressResponseValidationError) ErrorName() string {
	return "ListGroupsProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGroupsProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGroupsProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGroupsProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGroupsProgressResponseValidationError{}

// Validate checks the field values on CardProgress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CardProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CardProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CardProgressMultiError, or
// nil if none found.
func (m *CardProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *CardProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CardId

	// no validation rules for Mark

	if all {
		switch v := interface{}(m.GetLastReviewTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CardProgressValidationError{
					field:  "LastReviewTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CardProgressValidationError{
					field:  "LastReviewTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastReviewTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CardProgressValidationError{
				field:  "LastReviewTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CardProgressMultiError(errors)
	}

	return nil
}

// CardProgressMultiError is an error wrapping multiple validation errors
// returned by CardProgress.ValidateAll() if the designated constraints aren't met.
type CardProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CardProgressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CardProgressMultiError) AllErrors() []error { return m }

// CardProgressValidationError is the validation error returned by
// CardProgress.Validate if the designated constraints aren't met.
type CardProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CardProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CardProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CardProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CardProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CardProgressValidationError) ErrorName() string { return "CardProgressValidationError" }

// Error satisfies the builtin error interface
func (e CardProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCardProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CardProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CardProgressValidationError{}

// Validate checks the field values on ListCardsProgressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCardsProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCardsProgressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCardsProgressRequestMultiError, or nil if none found.
func (m *ListCardsProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCardsProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupId

	if len(errors) > 0 {
		return ListCardsProgressRequestMultiError(errors)
	}

	return nil
}

// ListCardsProgressRequestMultiError is an error wrapping multiple validation
// errors returned by ListCardsProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCardsProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCardsProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCardsProgressRequestMultiError) AllErrors() []error { return m }

// ListCardsProgressRequestValidationError is the validation error returned by
// ListCardsProgressRequest.Validate if the designated constraints aren't met.
type ListCardsProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCardsProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCardsProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCardsProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCardsProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCardsProgressRequestValidationError) ErrorName() string {
	return "ListCardsProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCardsProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCardsProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCardsProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCardsProgressRequestValidationError{}

// Validate checks the field values on ListCardsProgressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCardsProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCardsProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCardsProgressResponseMultiError, or nil if none found.
func (m *ListCardsProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCardsProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCardsProgresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCardsProgressResponseValidationError{
						field:  fmt.Sprintf("CardsProgresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCardsProgressResponseValidationError{
						field:  fmt.Sprintf("CardsProgresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCardsProgressResponseValidationError{
					field:  fmt.Sprintf("CardsProgresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCardsProgressResponseMultiError(errors)
	}

	return nil
}

// ListCardsProgressResponseMultiError is an error wrapping multiple validation
// errors returned by ListCardsProgressResponse.ValidateAll() if the
// designated constraints aren't met.
type ListCardsProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCardsProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCardsProgressResponseMultiError) AllErrors() []error { return m }

// ListCardsProgressResponseValidationError is the validation error returned by
// ListCardsProgressResponse.Validate if the designated constraints aren't met.
type ListCardsProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCardsProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCardsProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCardsProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCardsProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCardsProgressResponseValidationError) ErrorName() string {
	return "ListCardsProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCardsProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCardsProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCardsProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCardsProgressResponseValidationError{}
