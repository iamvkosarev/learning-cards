// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/iamvkosarev/learning-cards/internal/module.UserVerifier -o user_verifier_mock.go -n NewUserVerifierMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/iamvkosarev/learning-cards/internal/model"
)

// NewUserVerifierMock implements mm_module.UserVerifier
type NewUserVerifierMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcVerifyUserByContext          func(ctx context.Context) (userID model.UserId, err error)
	funcVerifyUserByContextOrigin    string
	inspectFuncVerifyUserByContext   func(ctx context.Context)
	afterVerifyUserByContextCounter  uint64
	beforeVerifyUserByContextCounter uint64
	VerifyUserByContextMock          mNewUserVerifierMockVerifyUserByContext
}

// NewNewUserVerifierMock returns a mock for mm_module.UserVerifier
func NewNewUserVerifierMock(t minimock.Tester) *NewUserVerifierMock {
	m := &NewUserVerifierMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.VerifyUserByContextMock = mNewUserVerifierMockVerifyUserByContext{mock: m}
	m.VerifyUserByContextMock.callArgs = []*NewUserVerifierMockVerifyUserByContextParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mNewUserVerifierMockVerifyUserByContext struct {
	optional           bool
	mock               *NewUserVerifierMock
	defaultExpectation *NewUserVerifierMockVerifyUserByContextExpectation
	expectations       []*NewUserVerifierMockVerifyUserByContextExpectation

	callArgs []*NewUserVerifierMockVerifyUserByContextParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// NewUserVerifierMockVerifyUserByContextExpectation specifies expectation struct of the UserVerifier.VerifyUserByContext
type NewUserVerifierMockVerifyUserByContextExpectation struct {
	mock               *NewUserVerifierMock
	params             *NewUserVerifierMockVerifyUserByContextParams
	paramPtrs          *NewUserVerifierMockVerifyUserByContextParamPtrs
	expectationOrigins NewUserVerifierMockVerifyUserByContextExpectationOrigins
	results            *NewUserVerifierMockVerifyUserByContextResults
	returnOrigin       string
	Counter            uint64
}

// NewUserVerifierMockVerifyUserByContextParams contains parameters of the UserVerifier.VerifyUserByContext
type NewUserVerifierMockVerifyUserByContextParams struct {
	ctx context.Context
}

// NewUserVerifierMockVerifyUserByContextParamPtrs contains pointers to parameters of the UserVerifier.VerifyUserByContext
type NewUserVerifierMockVerifyUserByContextParamPtrs struct {
	ctx *context.Context
}

// NewUserVerifierMockVerifyUserByContextResults contains results of the UserVerifier.VerifyUserByContext
type NewUserVerifierMockVerifyUserByContextResults struct {
	userID model.UserId
	err    error
}

// NewUserVerifierMockVerifyUserByContextOrigins contains origins of expectations of the UserVerifier.VerifyUserByContext
type NewUserVerifierMockVerifyUserByContextExpectationOrigins struct {
	origin    string
	originCtx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmVerifyUserByContext *mNewUserVerifierMockVerifyUserByContext) Optional() *mNewUserVerifierMockVerifyUserByContext {
	mmVerifyUserByContext.optional = true
	return mmVerifyUserByContext
}

// Expect sets up expected params for UserVerifier.VerifyUserByContext
func (mmVerifyUserByContext *mNewUserVerifierMockVerifyUserByContext) Expect(ctx context.Context) *mNewUserVerifierMockVerifyUserByContext {
	if mmVerifyUserByContext.mock.funcVerifyUserByContext != nil {
		mmVerifyUserByContext.mock.t.Fatalf("NewUserVerifierMock.VerifyUserByContext mock is already set by Set")
	}

	if mmVerifyUserByContext.defaultExpectation == nil {
		mmVerifyUserByContext.defaultExpectation = &NewUserVerifierMockVerifyUserByContextExpectation{}
	}

	if mmVerifyUserByContext.defaultExpectation.paramPtrs != nil {
		mmVerifyUserByContext.mock.t.Fatalf("NewUserVerifierMock.VerifyUserByContext mock is already set by ExpectParams functions")
	}

	mmVerifyUserByContext.defaultExpectation.params = &NewUserVerifierMockVerifyUserByContextParams{ctx}
	mmVerifyUserByContext.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmVerifyUserByContext.expectations {
		if minimock.Equal(e.params, mmVerifyUserByContext.defaultExpectation.params) {
			mmVerifyUserByContext.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVerifyUserByContext.defaultExpectation.params)
		}
	}

	return mmVerifyUserByContext
}

// ExpectCtxParam1 sets up expected param ctx for UserVerifier.VerifyUserByContext
func (mmVerifyUserByContext *mNewUserVerifierMockVerifyUserByContext) ExpectCtxParam1(ctx context.Context) *mNewUserVerifierMockVerifyUserByContext {
	if mmVerifyUserByContext.mock.funcVerifyUserByContext != nil {
		mmVerifyUserByContext.mock.t.Fatalf("NewUserVerifierMock.VerifyUserByContext mock is already set by Set")
	}

	if mmVerifyUserByContext.defaultExpectation == nil {
		mmVerifyUserByContext.defaultExpectation = &NewUserVerifierMockVerifyUserByContextExpectation{}
	}

	if mmVerifyUserByContext.defaultExpectation.params != nil {
		mmVerifyUserByContext.mock.t.Fatalf("NewUserVerifierMock.VerifyUserByContext mock is already set by Expect")
	}

	if mmVerifyUserByContext.defaultExpectation.paramPtrs == nil {
		mmVerifyUserByContext.defaultExpectation.paramPtrs = &NewUserVerifierMockVerifyUserByContextParamPtrs{}
	}
	mmVerifyUserByContext.defaultExpectation.paramPtrs.ctx = &ctx
	mmVerifyUserByContext.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmVerifyUserByContext
}

// Inspect accepts an inspector function that has same arguments as the UserVerifier.VerifyUserByContext
func (mmVerifyUserByContext *mNewUserVerifierMockVerifyUserByContext) Inspect(f func(ctx context.Context)) *mNewUserVerifierMockVerifyUserByContext {
	if mmVerifyUserByContext.mock.inspectFuncVerifyUserByContext != nil {
		mmVerifyUserByContext.mock.t.Fatalf("Inspect function is already set for NewUserVerifierMock.VerifyUserByContext")
	}

	mmVerifyUserByContext.mock.inspectFuncVerifyUserByContext = f

	return mmVerifyUserByContext
}

// Return sets up results that will be returned by UserVerifier.VerifyUserByContext
func (mmVerifyUserByContext *mNewUserVerifierMockVerifyUserByContext) Return(userID model.UserId, err error) *NewUserVerifierMock {
	if mmVerifyUserByContext.mock.funcVerifyUserByContext != nil {
		mmVerifyUserByContext.mock.t.Fatalf("NewUserVerifierMock.VerifyUserByContext mock is already set by Set")
	}

	if mmVerifyUserByContext.defaultExpectation == nil {
		mmVerifyUserByContext.defaultExpectation = &NewUserVerifierMockVerifyUserByContextExpectation{mock: mmVerifyUserByContext.mock}
	}
	mmVerifyUserByContext.defaultExpectation.results = &NewUserVerifierMockVerifyUserByContextResults{userID, err}
	mmVerifyUserByContext.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmVerifyUserByContext.mock
}

// Set uses given function f to mock the UserVerifier.VerifyUserByContext method
func (mmVerifyUserByContext *mNewUserVerifierMockVerifyUserByContext) Set(f func(ctx context.Context) (userID model.UserId, err error)) *NewUserVerifierMock {
	if mmVerifyUserByContext.defaultExpectation != nil {
		mmVerifyUserByContext.mock.t.Fatalf("Default expectation is already set for the UserVerifier.VerifyUserByContext method")
	}

	if len(mmVerifyUserByContext.expectations) > 0 {
		mmVerifyUserByContext.mock.t.Fatalf("Some expectations are already set for the UserVerifier.VerifyUserByContext method")
	}

	mmVerifyUserByContext.mock.funcVerifyUserByContext = f
	mmVerifyUserByContext.mock.funcVerifyUserByContextOrigin = minimock.CallerInfo(1)
	return mmVerifyUserByContext.mock
}

// When sets expectation for the UserVerifier.VerifyUserByContext which will trigger the result defined by the following
// Then helper
func (mmVerifyUserByContext *mNewUserVerifierMockVerifyUserByContext) When(ctx context.Context) *NewUserVerifierMockVerifyUserByContextExpectation {
	if mmVerifyUserByContext.mock.funcVerifyUserByContext != nil {
		mmVerifyUserByContext.mock.t.Fatalf("NewUserVerifierMock.VerifyUserByContext mock is already set by Set")
	}

	expectation := &NewUserVerifierMockVerifyUserByContextExpectation{
		mock:               mmVerifyUserByContext.mock,
		params:             &NewUserVerifierMockVerifyUserByContextParams{ctx},
		expectationOrigins: NewUserVerifierMockVerifyUserByContextExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmVerifyUserByContext.expectations = append(mmVerifyUserByContext.expectations, expectation)
	return expectation
}

// Then sets up UserVerifier.VerifyUserByContext return parameters for the expectation previously defined by the When method
func (e *NewUserVerifierMockVerifyUserByContextExpectation) Then(userID model.UserId, err error) *NewUserVerifierMock {
	e.results = &NewUserVerifierMockVerifyUserByContextResults{userID, err}
	return e.mock
}

// Times sets number of times UserVerifier.VerifyUserByContext should be invoked
func (mmVerifyUserByContext *mNewUserVerifierMockVerifyUserByContext) Times(n uint64) *mNewUserVerifierMockVerifyUserByContext {
	if n == 0 {
		mmVerifyUserByContext.mock.t.Fatalf("Times of NewUserVerifierMock.VerifyUserByContext mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmVerifyUserByContext.expectedInvocations, n)
	mmVerifyUserByContext.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmVerifyUserByContext
}

func (mmVerifyUserByContext *mNewUserVerifierMockVerifyUserByContext) invocationsDone() bool {
	if len(mmVerifyUserByContext.expectations) == 0 && mmVerifyUserByContext.defaultExpectation == nil && mmVerifyUserByContext.mock.funcVerifyUserByContext == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmVerifyUserByContext.mock.afterVerifyUserByContextCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmVerifyUserByContext.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// VerifyUserByContext implements mm_module.UserVerifier
func (mmVerifyUserByContext *NewUserVerifierMock) VerifyUserByContext(ctx context.Context) (userID model.UserId, err error) {
	mm_atomic.AddUint64(&mmVerifyUserByContext.beforeVerifyUserByContextCounter, 1)
	defer mm_atomic.AddUint64(&mmVerifyUserByContext.afterVerifyUserByContextCounter, 1)

	mmVerifyUserByContext.t.Helper()

	if mmVerifyUserByContext.inspectFuncVerifyUserByContext != nil {
		mmVerifyUserByContext.inspectFuncVerifyUserByContext(ctx)
	}

	mm_params := NewUserVerifierMockVerifyUserByContextParams{ctx}

	// Record call args
	mmVerifyUserByContext.VerifyUserByContextMock.mutex.Lock()
	mmVerifyUserByContext.VerifyUserByContextMock.callArgs = append(mmVerifyUserByContext.VerifyUserByContextMock.callArgs, &mm_params)
	mmVerifyUserByContext.VerifyUserByContextMock.mutex.Unlock()

	for _, e := range mmVerifyUserByContext.VerifyUserByContextMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.userID, e.results.err
		}
	}

	if mmVerifyUserByContext.VerifyUserByContextMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVerifyUserByContext.VerifyUserByContextMock.defaultExpectation.Counter, 1)
		mm_want := mmVerifyUserByContext.VerifyUserByContextMock.defaultExpectation.params
		mm_want_ptrs := mmVerifyUserByContext.VerifyUserByContextMock.defaultExpectation.paramPtrs

		mm_got := NewUserVerifierMockVerifyUserByContextParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmVerifyUserByContext.t.Errorf("NewUserVerifierMock.VerifyUserByContext got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmVerifyUserByContext.VerifyUserByContextMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVerifyUserByContext.t.Errorf("NewUserVerifierMock.VerifyUserByContext got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmVerifyUserByContext.VerifyUserByContextMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVerifyUserByContext.VerifyUserByContextMock.defaultExpectation.results
		if mm_results == nil {
			mmVerifyUserByContext.t.Fatal("No results are set for the NewUserVerifierMock.VerifyUserByContext")
		}
		return (*mm_results).userID, (*mm_results).err
	}
	if mmVerifyUserByContext.funcVerifyUserByContext != nil {
		return mmVerifyUserByContext.funcVerifyUserByContext(ctx)
	}
	mmVerifyUserByContext.t.Fatalf("Unexpected call to NewUserVerifierMock.VerifyUserByContext. %v", ctx)
	return
}

// VerifyUserByContextAfterCounter returns a count of finished NewUserVerifierMock.VerifyUserByContext invocations
func (mmVerifyUserByContext *NewUserVerifierMock) VerifyUserByContextAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerifyUserByContext.afterVerifyUserByContextCounter)
}

// VerifyUserByContextBeforeCounter returns a count of NewUserVerifierMock.VerifyUserByContext invocations
func (mmVerifyUserByContext *NewUserVerifierMock) VerifyUserByContextBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerifyUserByContext.beforeVerifyUserByContextCounter)
}

// Calls returns a list of arguments used in each call to NewUserVerifierMock.VerifyUserByContext.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVerifyUserByContext *mNewUserVerifierMockVerifyUserByContext) Calls() []*NewUserVerifierMockVerifyUserByContextParams {
	mmVerifyUserByContext.mutex.RLock()

	argCopy := make([]*NewUserVerifierMockVerifyUserByContextParams, len(mmVerifyUserByContext.callArgs))
	copy(argCopy, mmVerifyUserByContext.callArgs)

	mmVerifyUserByContext.mutex.RUnlock()

	return argCopy
}

// MinimockVerifyUserByContextDone returns true if the count of the VerifyUserByContext invocations corresponds
// the number of defined expectations
func (m *NewUserVerifierMock) MinimockVerifyUserByContextDone() bool {
	if m.VerifyUserByContextMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.VerifyUserByContextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.VerifyUserByContextMock.invocationsDone()
}

// MinimockVerifyUserByContextInspect logs each unmet expectation
func (m *NewUserVerifierMock) MinimockVerifyUserByContextInspect() {
	for _, e := range m.VerifyUserByContextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NewUserVerifierMock.VerifyUserByContext at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterVerifyUserByContextCounter := mm_atomic.LoadUint64(&m.afterVerifyUserByContextCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.VerifyUserByContextMock.defaultExpectation != nil && afterVerifyUserByContextCounter < 1 {
		if m.VerifyUserByContextMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to NewUserVerifierMock.VerifyUserByContext at\n%s", m.VerifyUserByContextMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to NewUserVerifierMock.VerifyUserByContext at\n%s with params: %#v", m.VerifyUserByContextMock.defaultExpectation.expectationOrigins.origin, *m.VerifyUserByContextMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerifyUserByContext != nil && afterVerifyUserByContextCounter < 1 {
		m.t.Errorf("Expected call to NewUserVerifierMock.VerifyUserByContext at\n%s", m.funcVerifyUserByContextOrigin)
	}

	if !m.VerifyUserByContextMock.invocationsDone() && afterVerifyUserByContextCounter > 0 {
		m.t.Errorf("Expected %d calls to NewUserVerifierMock.VerifyUserByContext at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.VerifyUserByContextMock.expectedInvocations), m.VerifyUserByContextMock.expectedInvocationsOrigin, afterVerifyUserByContextCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *NewUserVerifierMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockVerifyUserByContextInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *NewUserVerifierMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *NewUserVerifierMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockVerifyUserByContextDone()
}
