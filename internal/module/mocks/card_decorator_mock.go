// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/iamvkosarev/learning-cards/internal/module.CardDecorator -o card_decorator_mock.go -n CardDecoratorMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/iamvkosarev/learning-cards/internal/model"
)

// CardDecoratorMock implements mm_module.CardDecorator
type CardDecoratorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDecorateCard          func(ctx context.Context, card *model.Card) (err error)
	funcDecorateCardOrigin    string
	inspectFuncDecorateCard   func(ctx context.Context, card *model.Card)
	afterDecorateCardCounter  uint64
	beforeDecorateCardCounter uint64
	DecorateCardMock          mCardDecoratorMockDecorateCard
}

// NewCardDecoratorMock returns a mock for mm_module.CardDecorator
func NewCardDecoratorMock(t minimock.Tester) *CardDecoratorMock {
	m := &CardDecoratorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DecorateCardMock = mCardDecoratorMockDecorateCard{mock: m}
	m.DecorateCardMock.callArgs = []*CardDecoratorMockDecorateCardParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCardDecoratorMockDecorateCard struct {
	optional           bool
	mock               *CardDecoratorMock
	defaultExpectation *CardDecoratorMockDecorateCardExpectation
	expectations       []*CardDecoratorMockDecorateCardExpectation

	callArgs []*CardDecoratorMockDecorateCardParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CardDecoratorMockDecorateCardExpectation specifies expectation struct of the CardDecorator.DecorateCard
type CardDecoratorMockDecorateCardExpectation struct {
	mock               *CardDecoratorMock
	params             *CardDecoratorMockDecorateCardParams
	paramPtrs          *CardDecoratorMockDecorateCardParamPtrs
	expectationOrigins CardDecoratorMockDecorateCardExpectationOrigins
	results            *CardDecoratorMockDecorateCardResults
	returnOrigin       string
	Counter            uint64
}

// CardDecoratorMockDecorateCardParams contains parameters of the CardDecorator.DecorateCard
type CardDecoratorMockDecorateCardParams struct {
	ctx  context.Context
	card *model.Card
}

// CardDecoratorMockDecorateCardParamPtrs contains pointers to parameters of the CardDecorator.DecorateCard
type CardDecoratorMockDecorateCardParamPtrs struct {
	ctx  *context.Context
	card **model.Card
}

// CardDecoratorMockDecorateCardResults contains results of the CardDecorator.DecorateCard
type CardDecoratorMockDecorateCardResults struct {
	err error
}

// CardDecoratorMockDecorateCardOrigins contains origins of expectations of the CardDecorator.DecorateCard
type CardDecoratorMockDecorateCardExpectationOrigins struct {
	origin     string
	originCtx  string
	originCard string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDecorateCard *mCardDecoratorMockDecorateCard) Optional() *mCardDecoratorMockDecorateCard {
	mmDecorateCard.optional = true
	return mmDecorateCard
}

// Expect sets up expected params for CardDecorator.DecorateCard
func (mmDecorateCard *mCardDecoratorMockDecorateCard) Expect(ctx context.Context, card *model.Card) *mCardDecoratorMockDecorateCard {
	if mmDecorateCard.mock.funcDecorateCard != nil {
		mmDecorateCard.mock.t.Fatalf("CardDecoratorMock.DecorateCard mock is already set by Set")
	}

	if mmDecorateCard.defaultExpectation == nil {
		mmDecorateCard.defaultExpectation = &CardDecoratorMockDecorateCardExpectation{}
	}

	if mmDecorateCard.defaultExpectation.paramPtrs != nil {
		mmDecorateCard.mock.t.Fatalf("CardDecoratorMock.DecorateCard mock is already set by ExpectParams functions")
	}

	mmDecorateCard.defaultExpectation.params = &CardDecoratorMockDecorateCardParams{ctx, card}
	mmDecorateCard.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDecorateCard.expectations {
		if minimock.Equal(e.params, mmDecorateCard.defaultExpectation.params) {
			mmDecorateCard.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDecorateCard.defaultExpectation.params)
		}
	}

	return mmDecorateCard
}

// ExpectCtxParam1 sets up expected param ctx for CardDecorator.DecorateCard
func (mmDecorateCard *mCardDecoratorMockDecorateCard) ExpectCtxParam1(ctx context.Context) *mCardDecoratorMockDecorateCard {
	if mmDecorateCard.mock.funcDecorateCard != nil {
		mmDecorateCard.mock.t.Fatalf("CardDecoratorMock.DecorateCard mock is already set by Set")
	}

	if mmDecorateCard.defaultExpectation == nil {
		mmDecorateCard.defaultExpectation = &CardDecoratorMockDecorateCardExpectation{}
	}

	if mmDecorateCard.defaultExpectation.params != nil {
		mmDecorateCard.mock.t.Fatalf("CardDecoratorMock.DecorateCard mock is already set by Expect")
	}

	if mmDecorateCard.defaultExpectation.paramPtrs == nil {
		mmDecorateCard.defaultExpectation.paramPtrs = &CardDecoratorMockDecorateCardParamPtrs{}
	}
	mmDecorateCard.defaultExpectation.paramPtrs.ctx = &ctx
	mmDecorateCard.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmDecorateCard
}

// ExpectCardParam2 sets up expected param card for CardDecorator.DecorateCard
func (mmDecorateCard *mCardDecoratorMockDecorateCard) ExpectCardParam2(card *model.Card) *mCardDecoratorMockDecorateCard {
	if mmDecorateCard.mock.funcDecorateCard != nil {
		mmDecorateCard.mock.t.Fatalf("CardDecoratorMock.DecorateCard mock is already set by Set")
	}

	if mmDecorateCard.defaultExpectation == nil {
		mmDecorateCard.defaultExpectation = &CardDecoratorMockDecorateCardExpectation{}
	}

	if mmDecorateCard.defaultExpectation.params != nil {
		mmDecorateCard.mock.t.Fatalf("CardDecoratorMock.DecorateCard mock is already set by Expect")
	}

	if mmDecorateCard.defaultExpectation.paramPtrs == nil {
		mmDecorateCard.defaultExpectation.paramPtrs = &CardDecoratorMockDecorateCardParamPtrs{}
	}
	mmDecorateCard.defaultExpectation.paramPtrs.card = &card
	mmDecorateCard.defaultExpectation.expectationOrigins.originCard = minimock.CallerInfo(1)

	return mmDecorateCard
}

// Inspect accepts an inspector function that has same arguments as the CardDecorator.DecorateCard
func (mmDecorateCard *mCardDecoratorMockDecorateCard) Inspect(f func(ctx context.Context, card *model.Card)) *mCardDecoratorMockDecorateCard {
	if mmDecorateCard.mock.inspectFuncDecorateCard != nil {
		mmDecorateCard.mock.t.Fatalf("Inspect function is already set for CardDecoratorMock.DecorateCard")
	}

	mmDecorateCard.mock.inspectFuncDecorateCard = f

	return mmDecorateCard
}

// Return sets up results that will be returned by CardDecorator.DecorateCard
func (mmDecorateCard *mCardDecoratorMockDecorateCard) Return(err error) *CardDecoratorMock {
	if mmDecorateCard.mock.funcDecorateCard != nil {
		mmDecorateCard.mock.t.Fatalf("CardDecoratorMock.DecorateCard mock is already set by Set")
	}

	if mmDecorateCard.defaultExpectation == nil {
		mmDecorateCard.defaultExpectation = &CardDecoratorMockDecorateCardExpectation{mock: mmDecorateCard.mock}
	}
	mmDecorateCard.defaultExpectation.results = &CardDecoratorMockDecorateCardResults{err}
	mmDecorateCard.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDecorateCard.mock
}

// Set uses given function f to mock the CardDecorator.DecorateCard method
func (mmDecorateCard *mCardDecoratorMockDecorateCard) Set(f func(ctx context.Context, card *model.Card) (err error)) *CardDecoratorMock {
	if mmDecorateCard.defaultExpectation != nil {
		mmDecorateCard.mock.t.Fatalf("Default expectation is already set for the CardDecorator.DecorateCard method")
	}

	if len(mmDecorateCard.expectations) > 0 {
		mmDecorateCard.mock.t.Fatalf("Some expectations are already set for the CardDecorator.DecorateCard method")
	}

	mmDecorateCard.mock.funcDecorateCard = f
	mmDecorateCard.mock.funcDecorateCardOrigin = minimock.CallerInfo(1)
	return mmDecorateCard.mock
}

// When sets expectation for the CardDecorator.DecorateCard which will trigger the result defined by the following
// Then helper
func (mmDecorateCard *mCardDecoratorMockDecorateCard) When(ctx context.Context, card *model.Card) *CardDecoratorMockDecorateCardExpectation {
	if mmDecorateCard.mock.funcDecorateCard != nil {
		mmDecorateCard.mock.t.Fatalf("CardDecoratorMock.DecorateCard mock is already set by Set")
	}

	expectation := &CardDecoratorMockDecorateCardExpectation{
		mock:               mmDecorateCard.mock,
		params:             &CardDecoratorMockDecorateCardParams{ctx, card},
		expectationOrigins: CardDecoratorMockDecorateCardExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDecorateCard.expectations = append(mmDecorateCard.expectations, expectation)
	return expectation
}

// Then sets up CardDecorator.DecorateCard return parameters for the expectation previously defined by the When method
func (e *CardDecoratorMockDecorateCardExpectation) Then(err error) *CardDecoratorMock {
	e.results = &CardDecoratorMockDecorateCardResults{err}
	return e.mock
}

// Times sets number of times CardDecorator.DecorateCard should be invoked
func (mmDecorateCard *mCardDecoratorMockDecorateCard) Times(n uint64) *mCardDecoratorMockDecorateCard {
	if n == 0 {
		mmDecorateCard.mock.t.Fatalf("Times of CardDecoratorMock.DecorateCard mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDecorateCard.expectedInvocations, n)
	mmDecorateCard.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDecorateCard
}

func (mmDecorateCard *mCardDecoratorMockDecorateCard) invocationsDone() bool {
	if len(mmDecorateCard.expectations) == 0 && mmDecorateCard.defaultExpectation == nil && mmDecorateCard.mock.funcDecorateCard == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDecorateCard.mock.afterDecorateCardCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDecorateCard.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DecorateCard implements mm_module.CardDecorator
func (mmDecorateCard *CardDecoratorMock) DecorateCard(ctx context.Context, card *model.Card) (err error) {
	mm_atomic.AddUint64(&mmDecorateCard.beforeDecorateCardCounter, 1)
	defer mm_atomic.AddUint64(&mmDecorateCard.afterDecorateCardCounter, 1)

	mmDecorateCard.t.Helper()

	if mmDecorateCard.inspectFuncDecorateCard != nil {
		mmDecorateCard.inspectFuncDecorateCard(ctx, card)
	}

	mm_params := CardDecoratorMockDecorateCardParams{ctx, card}

	// Record call args
	mmDecorateCard.DecorateCardMock.mutex.Lock()
	mmDecorateCard.DecorateCardMock.callArgs = append(mmDecorateCard.DecorateCardMock.callArgs, &mm_params)
	mmDecorateCard.DecorateCardMock.mutex.Unlock()

	for _, e := range mmDecorateCard.DecorateCardMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDecorateCard.DecorateCardMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDecorateCard.DecorateCardMock.defaultExpectation.Counter, 1)
		mm_want := mmDecorateCard.DecorateCardMock.defaultExpectation.params
		mm_want_ptrs := mmDecorateCard.DecorateCardMock.defaultExpectation.paramPtrs

		mm_got := CardDecoratorMockDecorateCardParams{ctx, card}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDecorateCard.t.Errorf("CardDecoratorMock.DecorateCard got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDecorateCard.DecorateCardMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.card != nil && !minimock.Equal(*mm_want_ptrs.card, mm_got.card) {
				mmDecorateCard.t.Errorf("CardDecoratorMock.DecorateCard got unexpected parameter card, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDecorateCard.DecorateCardMock.defaultExpectation.expectationOrigins.originCard, *mm_want_ptrs.card, mm_got.card, minimock.Diff(*mm_want_ptrs.card, mm_got.card))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDecorateCard.t.Errorf("CardDecoratorMock.DecorateCard got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDecorateCard.DecorateCardMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDecorateCard.DecorateCardMock.defaultExpectation.results
		if mm_results == nil {
			mmDecorateCard.t.Fatal("No results are set for the CardDecoratorMock.DecorateCard")
		}
		return (*mm_results).err
	}
	if mmDecorateCard.funcDecorateCard != nil {
		return mmDecorateCard.funcDecorateCard(ctx, card)
	}
	mmDecorateCard.t.Fatalf("Unexpected call to CardDecoratorMock.DecorateCard. %v %v", ctx, card)
	return
}

// DecorateCardAfterCounter returns a count of finished CardDecoratorMock.DecorateCard invocations
func (mmDecorateCard *CardDecoratorMock) DecorateCardAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDecorateCard.afterDecorateCardCounter)
}

// DecorateCardBeforeCounter returns a count of CardDecoratorMock.DecorateCard invocations
func (mmDecorateCard *CardDecoratorMock) DecorateCardBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDecorateCard.beforeDecorateCardCounter)
}

// Calls returns a list of arguments used in each call to CardDecoratorMock.DecorateCard.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDecorateCard *mCardDecoratorMockDecorateCard) Calls() []*CardDecoratorMockDecorateCardParams {
	mmDecorateCard.mutex.RLock()

	argCopy := make([]*CardDecoratorMockDecorateCardParams, len(mmDecorateCard.callArgs))
	copy(argCopy, mmDecorateCard.callArgs)

	mmDecorateCard.mutex.RUnlock()

	return argCopy
}

// MinimockDecorateCardDone returns true if the count of the DecorateCard invocations corresponds
// the number of defined expectations
func (m *CardDecoratorMock) MinimockDecorateCardDone() bool {
	if m.DecorateCardMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DecorateCardMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DecorateCardMock.invocationsDone()
}

// MinimockDecorateCardInspect logs each unmet expectation
func (m *CardDecoratorMock) MinimockDecorateCardInspect() {
	for _, e := range m.DecorateCardMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CardDecoratorMock.DecorateCard at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDecorateCardCounter := mm_atomic.LoadUint64(&m.afterDecorateCardCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DecorateCardMock.defaultExpectation != nil && afterDecorateCardCounter < 1 {
		if m.DecorateCardMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CardDecoratorMock.DecorateCard at\n%s", m.DecorateCardMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CardDecoratorMock.DecorateCard at\n%s with params: %#v", m.DecorateCardMock.defaultExpectation.expectationOrigins.origin, *m.DecorateCardMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDecorateCard != nil && afterDecorateCardCounter < 1 {
		m.t.Errorf("Expected call to CardDecoratorMock.DecorateCard at\n%s", m.funcDecorateCardOrigin)
	}

	if !m.DecorateCardMock.invocationsDone() && afterDecorateCardCounter > 0 {
		m.t.Errorf("Expected %d calls to CardDecoratorMock.DecorateCard at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DecorateCardMock.expectedInvocations), m.DecorateCardMock.expectedInvocationsOrigin, afterDecorateCardCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CardDecoratorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDecorateCardInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CardDecoratorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CardDecoratorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDecorateCardDone()
}
