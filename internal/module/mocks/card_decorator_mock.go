// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/iamvkosarev/learning-cards/internal/module.CardDecorator -o card_decorator_mock.go -n CardDecoratorMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/iamvkosarev/learning-cards/internal/model"
)

// CardDecoratorMock implements mm_module.CardDecorator
type CardDecoratorMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcTryDecorateCard          func(ctx context.Context, card *model.Card, group *model.Group) (err error)
	funcTryDecorateCardOrigin    string
	inspectFuncTryDecorateCard   func(ctx context.Context, card *model.Card, group *model.Group)
	afterTryDecorateCardCounter  uint64
	beforeTryDecorateCardCounter uint64
	TryDecorateCardMock          mCardDecoratorMockTryDecorateCard
}

// NewCardDecoratorMock returns a mock for mm_module.CardDecorator
func NewCardDecoratorMock(t minimock.Tester) *CardDecoratorMock {
	m := &CardDecoratorMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.TryDecorateCardMock = mCardDecoratorMockTryDecorateCard{mock: m}
	m.TryDecorateCardMock.callArgs = []*CardDecoratorMockTryDecorateCardParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCardDecoratorMockTryDecorateCard struct {
	optional           bool
	mock               *CardDecoratorMock
	defaultExpectation *CardDecoratorMockTryDecorateCardExpectation
	expectations       []*CardDecoratorMockTryDecorateCardExpectation

	callArgs []*CardDecoratorMockTryDecorateCardParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CardDecoratorMockTryDecorateCardExpectation specifies expectation struct of the CardDecorator.TryDecorateCard
type CardDecoratorMockTryDecorateCardExpectation struct {
	mock               *CardDecoratorMock
	params             *CardDecoratorMockTryDecorateCardParams
	paramPtrs          *CardDecoratorMockTryDecorateCardParamPtrs
	expectationOrigins CardDecoratorMockTryDecorateCardExpectationOrigins
	results            *CardDecoratorMockTryDecorateCardResults
	returnOrigin       string
	Counter            uint64
}

// CardDecoratorMockTryDecorateCardParams contains parameters of the CardDecorator.TryDecorateCard
type CardDecoratorMockTryDecorateCardParams struct {
	ctx   context.Context
	card  *model.Card
	group *model.Group
}

// CardDecoratorMockTryDecorateCardParamPtrs contains pointers to parameters of the CardDecorator.TryDecorateCard
type CardDecoratorMockTryDecorateCardParamPtrs struct {
	ctx   *context.Context
	card  **model.Card
	group **model.Group
}

// CardDecoratorMockTryDecorateCardResults contains results of the CardDecorator.TryDecorateCard
type CardDecoratorMockTryDecorateCardResults struct {
	err error
}

// CardDecoratorMockTryDecorateCardOrigins contains origins of expectations of the CardDecorator.TryDecorateCard
type CardDecoratorMockTryDecorateCardExpectationOrigins struct {
	origin      string
	originCtx   string
	originCard  string
	originGroup string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) Optional() *mCardDecoratorMockTryDecorateCard {
	mmTryDecorateCard.optional = true
	return mmTryDecorateCard
}

// Expect sets up expected params for CardDecorator.TryDecorateCard
func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) Expect(ctx context.Context, card *model.Card, group *model.Group) *mCardDecoratorMockTryDecorateCard {
	if mmTryDecorateCard.mock.funcTryDecorateCard != nil {
		mmTryDecorateCard.mock.t.Fatalf("CardDecoratorMock.TryDecorateCard mock is already set by Set")
	}

	if mmTryDecorateCard.defaultExpectation == nil {
		mmTryDecorateCard.defaultExpectation = &CardDecoratorMockTryDecorateCardExpectation{}
	}

	if mmTryDecorateCard.defaultExpectation.paramPtrs != nil {
		mmTryDecorateCard.mock.t.Fatalf("CardDecoratorMock.TryDecorateCard mock is already set by ExpectParams functions")
	}

	mmTryDecorateCard.defaultExpectation.params = &CardDecoratorMockTryDecorateCardParams{ctx, card, group}
	mmTryDecorateCard.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmTryDecorateCard.expectations {
		if minimock.Equal(e.params, mmTryDecorateCard.defaultExpectation.params) {
			mmTryDecorateCard.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTryDecorateCard.defaultExpectation.params)
		}
	}

	return mmTryDecorateCard
}

// ExpectCtxParam1 sets up expected param ctx for CardDecorator.TryDecorateCard
func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) ExpectCtxParam1(ctx context.Context) *mCardDecoratorMockTryDecorateCard {
	if mmTryDecorateCard.mock.funcTryDecorateCard != nil {
		mmTryDecorateCard.mock.t.Fatalf("CardDecoratorMock.TryDecorateCard mock is already set by Set")
	}

	if mmTryDecorateCard.defaultExpectation == nil {
		mmTryDecorateCard.defaultExpectation = &CardDecoratorMockTryDecorateCardExpectation{}
	}

	if mmTryDecorateCard.defaultExpectation.params != nil {
		mmTryDecorateCard.mock.t.Fatalf("CardDecoratorMock.TryDecorateCard mock is already set by Expect")
	}

	if mmTryDecorateCard.defaultExpectation.paramPtrs == nil {
		mmTryDecorateCard.defaultExpectation.paramPtrs = &CardDecoratorMockTryDecorateCardParamPtrs{}
	}
	mmTryDecorateCard.defaultExpectation.paramPtrs.ctx = &ctx
	mmTryDecorateCard.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmTryDecorateCard
}

// ExpectCardParam2 sets up expected param card for CardDecorator.TryDecorateCard
func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) ExpectCardParam2(card *model.Card) *mCardDecoratorMockTryDecorateCard {
	if mmTryDecorateCard.mock.funcTryDecorateCard != nil {
		mmTryDecorateCard.mock.t.Fatalf("CardDecoratorMock.TryDecorateCard mock is already set by Set")
	}

	if mmTryDecorateCard.defaultExpectation == nil {
		mmTryDecorateCard.defaultExpectation = &CardDecoratorMockTryDecorateCardExpectation{}
	}

	if mmTryDecorateCard.defaultExpectation.params != nil {
		mmTryDecorateCard.mock.t.Fatalf("CardDecoratorMock.TryDecorateCard mock is already set by Expect")
	}

	if mmTryDecorateCard.defaultExpectation.paramPtrs == nil {
		mmTryDecorateCard.defaultExpectation.paramPtrs = &CardDecoratorMockTryDecorateCardParamPtrs{}
	}
	mmTryDecorateCard.defaultExpectation.paramPtrs.card = &card
	mmTryDecorateCard.defaultExpectation.expectationOrigins.originCard = minimock.CallerInfo(1)

	return mmTryDecorateCard
}

// ExpectGroupParam3 sets up expected param group for CardDecorator.TryDecorateCard
func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) ExpectGroupParam3(group *model.Group) *mCardDecoratorMockTryDecorateCard {
	if mmTryDecorateCard.mock.funcTryDecorateCard != nil {
		mmTryDecorateCard.mock.t.Fatalf("CardDecoratorMock.TryDecorateCard mock is already set by Set")
	}

	if mmTryDecorateCard.defaultExpectation == nil {
		mmTryDecorateCard.defaultExpectation = &CardDecoratorMockTryDecorateCardExpectation{}
	}

	if mmTryDecorateCard.defaultExpectation.params != nil {
		mmTryDecorateCard.mock.t.Fatalf("CardDecoratorMock.TryDecorateCard mock is already set by Expect")
	}

	if mmTryDecorateCard.defaultExpectation.paramPtrs == nil {
		mmTryDecorateCard.defaultExpectation.paramPtrs = &CardDecoratorMockTryDecorateCardParamPtrs{}
	}
	mmTryDecorateCard.defaultExpectation.paramPtrs.group = &group
	mmTryDecorateCard.defaultExpectation.expectationOrigins.originGroup = minimock.CallerInfo(1)

	return mmTryDecorateCard
}

// Inspect accepts an inspector function that has same arguments as the CardDecorator.TryDecorateCard
func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) Inspect(f func(ctx context.Context, card *model.Card, group *model.Group)) *mCardDecoratorMockTryDecorateCard {
	if mmTryDecorateCard.mock.inspectFuncTryDecorateCard != nil {
		mmTryDecorateCard.mock.t.Fatalf("Inspect function is already set for CardDecoratorMock.TryDecorateCard")
	}

	mmTryDecorateCard.mock.inspectFuncTryDecorateCard = f

	return mmTryDecorateCard
}

// Return sets up results that will be returned by CardDecorator.TryDecorateCard
func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) Return(err error) *CardDecoratorMock {
	if mmTryDecorateCard.mock.funcTryDecorateCard != nil {
		mmTryDecorateCard.mock.t.Fatalf("CardDecoratorMock.TryDecorateCard mock is already set by Set")
	}

	if mmTryDecorateCard.defaultExpectation == nil {
		mmTryDecorateCard.defaultExpectation = &CardDecoratorMockTryDecorateCardExpectation{mock: mmTryDecorateCard.mock}
	}
	mmTryDecorateCard.defaultExpectation.results = &CardDecoratorMockTryDecorateCardResults{err}
	mmTryDecorateCard.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmTryDecorateCard.mock
}

// Set uses given function f to mock the CardDecorator.TryDecorateCard method
func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) Set(f func(ctx context.Context, card *model.Card, group *model.Group) (err error)) *CardDecoratorMock {
	if mmTryDecorateCard.defaultExpectation != nil {
		mmTryDecorateCard.mock.t.Fatalf("Default expectation is already set for the CardDecorator.TryDecorateCard method")
	}

	if len(mmTryDecorateCard.expectations) > 0 {
		mmTryDecorateCard.mock.t.Fatalf("Some expectations are already set for the CardDecorator.TryDecorateCard method")
	}

	mmTryDecorateCard.mock.funcTryDecorateCard = f
	mmTryDecorateCard.mock.funcTryDecorateCardOrigin = minimock.CallerInfo(1)
	return mmTryDecorateCard.mock
}

// When sets expectation for the CardDecorator.TryDecorateCard which will trigger the result defined by the following
// Then helper
func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) When(ctx context.Context, card *model.Card, group *model.Group) *CardDecoratorMockTryDecorateCardExpectation {
	if mmTryDecorateCard.mock.funcTryDecorateCard != nil {
		mmTryDecorateCard.mock.t.Fatalf("CardDecoratorMock.TryDecorateCard mock is already set by Set")
	}

	expectation := &CardDecoratorMockTryDecorateCardExpectation{
		mock:               mmTryDecorateCard.mock,
		params:             &CardDecoratorMockTryDecorateCardParams{ctx, card, group},
		expectationOrigins: CardDecoratorMockTryDecorateCardExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmTryDecorateCard.expectations = append(mmTryDecorateCard.expectations, expectation)
	return expectation
}

// Then sets up CardDecorator.TryDecorateCard return parameters for the expectation previously defined by the When method
func (e *CardDecoratorMockTryDecorateCardExpectation) Then(err error) *CardDecoratorMock {
	e.results = &CardDecoratorMockTryDecorateCardResults{err}
	return e.mock
}

// Times sets number of times CardDecorator.TryDecorateCard should be invoked
func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) Times(n uint64) *mCardDecoratorMockTryDecorateCard {
	if n == 0 {
		mmTryDecorateCard.mock.t.Fatalf("Times of CardDecoratorMock.TryDecorateCard mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmTryDecorateCard.expectedInvocations, n)
	mmTryDecorateCard.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmTryDecorateCard
}

func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) invocationsDone() bool {
	if len(mmTryDecorateCard.expectations) == 0 && mmTryDecorateCard.defaultExpectation == nil && mmTryDecorateCard.mock.funcTryDecorateCard == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmTryDecorateCard.mock.afterTryDecorateCardCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmTryDecorateCard.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// TryDecorateCard implements mm_module.CardDecorator
func (mmTryDecorateCard *CardDecoratorMock) TryDecorateCard(ctx context.Context, card *model.Card, group *model.Group) (err error) {
	mm_atomic.AddUint64(&mmTryDecorateCard.beforeTryDecorateCardCounter, 1)
	defer mm_atomic.AddUint64(&mmTryDecorateCard.afterTryDecorateCardCounter, 1)

	mmTryDecorateCard.t.Helper()

	if mmTryDecorateCard.inspectFuncTryDecorateCard != nil {
		mmTryDecorateCard.inspectFuncTryDecorateCard(ctx, card, group)
	}

	mm_params := CardDecoratorMockTryDecorateCardParams{ctx, card, group}

	// Record call args
	mmTryDecorateCard.TryDecorateCardMock.mutex.Lock()
	mmTryDecorateCard.TryDecorateCardMock.callArgs = append(mmTryDecorateCard.TryDecorateCardMock.callArgs, &mm_params)
	mmTryDecorateCard.TryDecorateCardMock.mutex.Unlock()

	for _, e := range mmTryDecorateCard.TryDecorateCardMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmTryDecorateCard.TryDecorateCardMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTryDecorateCard.TryDecorateCardMock.defaultExpectation.Counter, 1)
		mm_want := mmTryDecorateCard.TryDecorateCardMock.defaultExpectation.params
		mm_want_ptrs := mmTryDecorateCard.TryDecorateCardMock.defaultExpectation.paramPtrs

		mm_got := CardDecoratorMockTryDecorateCardParams{ctx, card, group}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmTryDecorateCard.t.Errorf("CardDecoratorMock.TryDecorateCard got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmTryDecorateCard.TryDecorateCardMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.card != nil && !minimock.Equal(*mm_want_ptrs.card, mm_got.card) {
				mmTryDecorateCard.t.Errorf("CardDecoratorMock.TryDecorateCard got unexpected parameter card, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmTryDecorateCard.TryDecorateCardMock.defaultExpectation.expectationOrigins.originCard, *mm_want_ptrs.card, mm_got.card, minimock.Diff(*mm_want_ptrs.card, mm_got.card))
			}

			if mm_want_ptrs.group != nil && !minimock.Equal(*mm_want_ptrs.group, mm_got.group) {
				mmTryDecorateCard.t.Errorf("CardDecoratorMock.TryDecorateCard got unexpected parameter group, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmTryDecorateCard.TryDecorateCardMock.defaultExpectation.expectationOrigins.originGroup, *mm_want_ptrs.group, mm_got.group, minimock.Diff(*mm_want_ptrs.group, mm_got.group))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTryDecorateCard.t.Errorf("CardDecoratorMock.TryDecorateCard got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmTryDecorateCard.TryDecorateCardMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTryDecorateCard.TryDecorateCardMock.defaultExpectation.results
		if mm_results == nil {
			mmTryDecorateCard.t.Fatal("No results are set for the CardDecoratorMock.TryDecorateCard")
		}
		return (*mm_results).err
	}
	if mmTryDecorateCard.funcTryDecorateCard != nil {
		return mmTryDecorateCard.funcTryDecorateCard(ctx, card, group)
	}
	mmTryDecorateCard.t.Fatalf("Unexpected call to CardDecoratorMock.TryDecorateCard. %v %v %v", ctx, card, group)
	return
}

// TryDecorateCardAfterCounter returns a count of finished CardDecoratorMock.TryDecorateCard invocations
func (mmTryDecorateCard *CardDecoratorMock) TryDecorateCardAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTryDecorateCard.afterTryDecorateCardCounter)
}

// TryDecorateCardBeforeCounter returns a count of CardDecoratorMock.TryDecorateCard invocations
func (mmTryDecorateCard *CardDecoratorMock) TryDecorateCardBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTryDecorateCard.beforeTryDecorateCardCounter)
}

// Calls returns a list of arguments used in each call to CardDecoratorMock.TryDecorateCard.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTryDecorateCard *mCardDecoratorMockTryDecorateCard) Calls() []*CardDecoratorMockTryDecorateCardParams {
	mmTryDecorateCard.mutex.RLock()

	argCopy := make([]*CardDecoratorMockTryDecorateCardParams, len(mmTryDecorateCard.callArgs))
	copy(argCopy, mmTryDecorateCard.callArgs)

	mmTryDecorateCard.mutex.RUnlock()

	return argCopy
}

// MinimockTryDecorateCardDone returns true if the count of the TryDecorateCard invocations corresponds
// the number of defined expectations
func (m *CardDecoratorMock) MinimockTryDecorateCardDone() bool {
	if m.TryDecorateCardMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.TryDecorateCardMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.TryDecorateCardMock.invocationsDone()
}

// MinimockTryDecorateCardInspect logs each unmet expectation
func (m *CardDecoratorMock) MinimockTryDecorateCardInspect() {
	for _, e := range m.TryDecorateCardMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CardDecoratorMock.TryDecorateCard at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterTryDecorateCardCounter := mm_atomic.LoadUint64(&m.afterTryDecorateCardCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.TryDecorateCardMock.defaultExpectation != nil && afterTryDecorateCardCounter < 1 {
		if m.TryDecorateCardMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CardDecoratorMock.TryDecorateCard at\n%s", m.TryDecorateCardMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CardDecoratorMock.TryDecorateCard at\n%s with params: %#v", m.TryDecorateCardMock.defaultExpectation.expectationOrigins.origin, *m.TryDecorateCardMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTryDecorateCard != nil && afterTryDecorateCardCounter < 1 {
		m.t.Errorf("Expected call to CardDecoratorMock.TryDecorateCard at\n%s", m.funcTryDecorateCardOrigin)
	}

	if !m.TryDecorateCardMock.invocationsDone() && afterTryDecorateCardCounter > 0 {
		m.t.Errorf("Expected %d calls to CardDecoratorMock.TryDecorateCard at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.TryDecorateCardMock.expectedInvocations), m.TryDecorateCardMock.expectedInvocationsOrigin, afterTryDecorateCardCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CardDecoratorMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockTryDecorateCardInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CardDecoratorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CardDecoratorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockTryDecorateCardDone()
}
