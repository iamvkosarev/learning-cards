// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/iamvkosarev/learning-cards/internal/module.ReviewReader -o review_reader_mock.go -n ReviewReaderMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/iamvkosarev/learning-cards/internal/model"
)

// ReviewReaderMock implements mm_module.ReviewReader
type ReviewReaderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetCardsReviews          func(ctx context.Context, user model.UserId, group model.GroupId) (cpa1 []*model.CardReview, err error)
	funcGetCardsReviewsOrigin    string
	inspectFuncGetCardsReviews   func(ctx context.Context, user model.UserId, group model.GroupId)
	afterGetCardsReviewsCounter  uint64
	beforeGetCardsReviewsCounter uint64
	GetCardsReviewsMock          mReviewReaderMockGetCardsReviews
}

// NewReviewReaderMock returns a mock for mm_module.ReviewReader
func NewReviewReaderMock(t minimock.Tester) *ReviewReaderMock {
	m := &ReviewReaderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetCardsReviewsMock = mReviewReaderMockGetCardsReviews{mock: m}
	m.GetCardsReviewsMock.callArgs = []*ReviewReaderMockGetCardsReviewsParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mReviewReaderMockGetCardsReviews struct {
	optional           bool
	mock               *ReviewReaderMock
	defaultExpectation *ReviewReaderMockGetCardsReviewsExpectation
	expectations       []*ReviewReaderMockGetCardsReviewsExpectation

	callArgs []*ReviewReaderMockGetCardsReviewsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ReviewReaderMockGetCardsReviewsExpectation specifies expectation struct of the ReviewReader.GetCardsReviews
type ReviewReaderMockGetCardsReviewsExpectation struct {
	mock               *ReviewReaderMock
	params             *ReviewReaderMockGetCardsReviewsParams
	paramPtrs          *ReviewReaderMockGetCardsReviewsParamPtrs
	expectationOrigins ReviewReaderMockGetCardsReviewsExpectationOrigins
	results            *ReviewReaderMockGetCardsReviewsResults
	returnOrigin       string
	Counter            uint64
}

// ReviewReaderMockGetCardsReviewsParams contains parameters of the ReviewReader.GetCardsReviews
type ReviewReaderMockGetCardsReviewsParams struct {
	ctx   context.Context
	user  model.UserId
	group model.GroupId
}

// ReviewReaderMockGetCardsReviewsParamPtrs contains pointers to parameters of the ReviewReader.GetCardsReviews
type ReviewReaderMockGetCardsReviewsParamPtrs struct {
	ctx   *context.Context
	user  *model.UserId
	group *model.GroupId
}

// ReviewReaderMockGetCardsReviewsResults contains results of the ReviewReader.GetCardsReviews
type ReviewReaderMockGetCardsReviewsResults struct {
	cpa1 []*model.CardReview
	err  error
}

// ReviewReaderMockGetCardsReviewsOrigins contains origins of expectations of the ReviewReader.GetCardsReviews
type ReviewReaderMockGetCardsReviewsExpectationOrigins struct {
	origin      string
	originCtx   string
	originUser  string
	originGroup string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) Optional() *mReviewReaderMockGetCardsReviews {
	mmGetCardsReviews.optional = true
	return mmGetCardsReviews
}

// Expect sets up expected params for ReviewReader.GetCardsReviews
func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) Expect(ctx context.Context, user model.UserId, group model.GroupId) *mReviewReaderMockGetCardsReviews {
	if mmGetCardsReviews.mock.funcGetCardsReviews != nil {
		mmGetCardsReviews.mock.t.Fatalf("ReviewReaderMock.GetCardsReviews mock is already set by Set")
	}

	if mmGetCardsReviews.defaultExpectation == nil {
		mmGetCardsReviews.defaultExpectation = &ReviewReaderMockGetCardsReviewsExpectation{}
	}

	if mmGetCardsReviews.defaultExpectation.paramPtrs != nil {
		mmGetCardsReviews.mock.t.Fatalf("ReviewReaderMock.GetCardsReviews mock is already set by ExpectParams functions")
	}

	mmGetCardsReviews.defaultExpectation.params = &ReviewReaderMockGetCardsReviewsParams{ctx, user, group}
	mmGetCardsReviews.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetCardsReviews.expectations {
		if minimock.Equal(e.params, mmGetCardsReviews.defaultExpectation.params) {
			mmGetCardsReviews.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCardsReviews.defaultExpectation.params)
		}
	}

	return mmGetCardsReviews
}

// ExpectCtxParam1 sets up expected param ctx for ReviewReader.GetCardsReviews
func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) ExpectCtxParam1(ctx context.Context) *mReviewReaderMockGetCardsReviews {
	if mmGetCardsReviews.mock.funcGetCardsReviews != nil {
		mmGetCardsReviews.mock.t.Fatalf("ReviewReaderMock.GetCardsReviews mock is already set by Set")
	}

	if mmGetCardsReviews.defaultExpectation == nil {
		mmGetCardsReviews.defaultExpectation = &ReviewReaderMockGetCardsReviewsExpectation{}
	}

	if mmGetCardsReviews.defaultExpectation.params != nil {
		mmGetCardsReviews.mock.t.Fatalf("ReviewReaderMock.GetCardsReviews mock is already set by Expect")
	}

	if mmGetCardsReviews.defaultExpectation.paramPtrs == nil {
		mmGetCardsReviews.defaultExpectation.paramPtrs = &ReviewReaderMockGetCardsReviewsParamPtrs{}
	}
	mmGetCardsReviews.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetCardsReviews.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetCardsReviews
}

// ExpectUserParam2 sets up expected param user for ReviewReader.GetCardsReviews
func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) ExpectUserParam2(user model.UserId) *mReviewReaderMockGetCardsReviews {
	if mmGetCardsReviews.mock.funcGetCardsReviews != nil {
		mmGetCardsReviews.mock.t.Fatalf("ReviewReaderMock.GetCardsReviews mock is already set by Set")
	}

	if mmGetCardsReviews.defaultExpectation == nil {
		mmGetCardsReviews.defaultExpectation = &ReviewReaderMockGetCardsReviewsExpectation{}
	}

	if mmGetCardsReviews.defaultExpectation.params != nil {
		mmGetCardsReviews.mock.t.Fatalf("ReviewReaderMock.GetCardsReviews mock is already set by Expect")
	}

	if mmGetCardsReviews.defaultExpectation.paramPtrs == nil {
		mmGetCardsReviews.defaultExpectation.paramPtrs = &ReviewReaderMockGetCardsReviewsParamPtrs{}
	}
	mmGetCardsReviews.defaultExpectation.paramPtrs.user = &user
	mmGetCardsReviews.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmGetCardsReviews
}

// ExpectGroupParam3 sets up expected param group for ReviewReader.GetCardsReviews
func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) ExpectGroupParam3(group model.GroupId) *mReviewReaderMockGetCardsReviews {
	if mmGetCardsReviews.mock.funcGetCardsReviews != nil {
		mmGetCardsReviews.mock.t.Fatalf("ReviewReaderMock.GetCardsReviews mock is already set by Set")
	}

	if mmGetCardsReviews.defaultExpectation == nil {
		mmGetCardsReviews.defaultExpectation = &ReviewReaderMockGetCardsReviewsExpectation{}
	}

	if mmGetCardsReviews.defaultExpectation.params != nil {
		mmGetCardsReviews.mock.t.Fatalf("ReviewReaderMock.GetCardsReviews mock is already set by Expect")
	}

	if mmGetCardsReviews.defaultExpectation.paramPtrs == nil {
		mmGetCardsReviews.defaultExpectation.paramPtrs = &ReviewReaderMockGetCardsReviewsParamPtrs{}
	}
	mmGetCardsReviews.defaultExpectation.paramPtrs.group = &group
	mmGetCardsReviews.defaultExpectation.expectationOrigins.originGroup = minimock.CallerInfo(1)

	return mmGetCardsReviews
}

// Inspect accepts an inspector function that has same arguments as the ReviewReader.GetCardsReviews
func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) Inspect(f func(ctx context.Context, user model.UserId, group model.GroupId)) *mReviewReaderMockGetCardsReviews {
	if mmGetCardsReviews.mock.inspectFuncGetCardsReviews != nil {
		mmGetCardsReviews.mock.t.Fatalf("Inspect function is already set for ReviewReaderMock.GetCardsReviews")
	}

	mmGetCardsReviews.mock.inspectFuncGetCardsReviews = f

	return mmGetCardsReviews
}

// Return sets up results that will be returned by ReviewReader.GetCardsReviews
func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) Return(cpa1 []*model.CardReview, err error) *ReviewReaderMock {
	if mmGetCardsReviews.mock.funcGetCardsReviews != nil {
		mmGetCardsReviews.mock.t.Fatalf("ReviewReaderMock.GetCardsReviews mock is already set by Set")
	}

	if mmGetCardsReviews.defaultExpectation == nil {
		mmGetCardsReviews.defaultExpectation = &ReviewReaderMockGetCardsReviewsExpectation{mock: mmGetCardsReviews.mock}
	}
	mmGetCardsReviews.defaultExpectation.results = &ReviewReaderMockGetCardsReviewsResults{cpa1, err}
	mmGetCardsReviews.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetCardsReviews.mock
}

// Set uses given function f to mock the ReviewReader.GetCardsReviews method
func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) Set(f func(ctx context.Context, user model.UserId, group model.GroupId) (cpa1 []*model.CardReview, err error)) *ReviewReaderMock {
	if mmGetCardsReviews.defaultExpectation != nil {
		mmGetCardsReviews.mock.t.Fatalf("Default expectation is already set for the ReviewReader.GetCardsReviews method")
	}

	if len(mmGetCardsReviews.expectations) > 0 {
		mmGetCardsReviews.mock.t.Fatalf("Some expectations are already set for the ReviewReader.GetCardsReviews method")
	}

	mmGetCardsReviews.mock.funcGetCardsReviews = f
	mmGetCardsReviews.mock.funcGetCardsReviewsOrigin = minimock.CallerInfo(1)
	return mmGetCardsReviews.mock
}

// When sets expectation for the ReviewReader.GetCardsReviews which will trigger the result defined by the following
// Then helper
func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) When(ctx context.Context, user model.UserId, group model.GroupId) *ReviewReaderMockGetCardsReviewsExpectation {
	if mmGetCardsReviews.mock.funcGetCardsReviews != nil {
		mmGetCardsReviews.mock.t.Fatalf("ReviewReaderMock.GetCardsReviews mock is already set by Set")
	}

	expectation := &ReviewReaderMockGetCardsReviewsExpectation{
		mock:               mmGetCardsReviews.mock,
		params:             &ReviewReaderMockGetCardsReviewsParams{ctx, user, group},
		expectationOrigins: ReviewReaderMockGetCardsReviewsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetCardsReviews.expectations = append(mmGetCardsReviews.expectations, expectation)
	return expectation
}

// Then sets up ReviewReader.GetCardsReviews return parameters for the expectation previously defined by the When method
func (e *ReviewReaderMockGetCardsReviewsExpectation) Then(cpa1 []*model.CardReview, err error) *ReviewReaderMock {
	e.results = &ReviewReaderMockGetCardsReviewsResults{cpa1, err}
	return e.mock
}

// Times sets number of times ReviewReader.GetCardsReviews should be invoked
func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) Times(n uint64) *mReviewReaderMockGetCardsReviews {
	if n == 0 {
		mmGetCardsReviews.mock.t.Fatalf("Times of ReviewReaderMock.GetCardsReviews mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetCardsReviews.expectedInvocations, n)
	mmGetCardsReviews.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetCardsReviews
}

func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) invocationsDone() bool {
	if len(mmGetCardsReviews.expectations) == 0 && mmGetCardsReviews.defaultExpectation == nil && mmGetCardsReviews.mock.funcGetCardsReviews == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetCardsReviews.mock.afterGetCardsReviewsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetCardsReviews.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetCardsReviews implements mm_module.ReviewReader
func (mmGetCardsReviews *ReviewReaderMock) GetCardsReviews(ctx context.Context, user model.UserId, group model.GroupId) (cpa1 []*model.CardReview, err error) {
	mm_atomic.AddUint64(&mmGetCardsReviews.beforeGetCardsReviewsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCardsReviews.afterGetCardsReviewsCounter, 1)

	mmGetCardsReviews.t.Helper()

	if mmGetCardsReviews.inspectFuncGetCardsReviews != nil {
		mmGetCardsReviews.inspectFuncGetCardsReviews(ctx, user, group)
	}

	mm_params := ReviewReaderMockGetCardsReviewsParams{ctx, user, group}

	// Record call args
	mmGetCardsReviews.GetCardsReviewsMock.mutex.Lock()
	mmGetCardsReviews.GetCardsReviewsMock.callArgs = append(mmGetCardsReviews.GetCardsReviewsMock.callArgs, &mm_params)
	mmGetCardsReviews.GetCardsReviewsMock.mutex.Unlock()

	for _, e := range mmGetCardsReviews.GetCardsReviewsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cpa1, e.results.err
		}
	}

	if mmGetCardsReviews.GetCardsReviewsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCardsReviews.GetCardsReviewsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCardsReviews.GetCardsReviewsMock.defaultExpectation.params
		mm_want_ptrs := mmGetCardsReviews.GetCardsReviewsMock.defaultExpectation.paramPtrs

		mm_got := ReviewReaderMockGetCardsReviewsParams{ctx, user, group}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetCardsReviews.t.Errorf("ReviewReaderMock.GetCardsReviews got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCardsReviews.GetCardsReviewsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmGetCardsReviews.t.Errorf("ReviewReaderMock.GetCardsReviews got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCardsReviews.GetCardsReviewsMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

			if mm_want_ptrs.group != nil && !minimock.Equal(*mm_want_ptrs.group, mm_got.group) {
				mmGetCardsReviews.t.Errorf("ReviewReaderMock.GetCardsReviews got unexpected parameter group, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCardsReviews.GetCardsReviewsMock.defaultExpectation.expectationOrigins.originGroup, *mm_want_ptrs.group, mm_got.group, minimock.Diff(*mm_want_ptrs.group, mm_got.group))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCardsReviews.t.Errorf("ReviewReaderMock.GetCardsReviews got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetCardsReviews.GetCardsReviewsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCardsReviews.GetCardsReviewsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCardsReviews.t.Fatal("No results are set for the ReviewReaderMock.GetCardsReviews")
		}
		return (*mm_results).cpa1, (*mm_results).err
	}
	if mmGetCardsReviews.funcGetCardsReviews != nil {
		return mmGetCardsReviews.funcGetCardsReviews(ctx, user, group)
	}
	mmGetCardsReviews.t.Fatalf("Unexpected call to ReviewReaderMock.GetCardsReviews. %v %v %v", ctx, user, group)
	return
}

// GetCardsReviewsAfterCounter returns a count of finished ReviewReaderMock.GetCardsReviews invocations
func (mmGetCardsReviews *ReviewReaderMock) GetCardsReviewsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCardsReviews.afterGetCardsReviewsCounter)
}

// GetCardsReviewsBeforeCounter returns a count of ReviewReaderMock.GetCardsReviews invocations
func (mmGetCardsReviews *ReviewReaderMock) GetCardsReviewsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCardsReviews.beforeGetCardsReviewsCounter)
}

// Calls returns a list of arguments used in each call to ReviewReaderMock.GetCardsReviews.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCardsReviews *mReviewReaderMockGetCardsReviews) Calls() []*ReviewReaderMockGetCardsReviewsParams {
	mmGetCardsReviews.mutex.RLock()

	argCopy := make([]*ReviewReaderMockGetCardsReviewsParams, len(mmGetCardsReviews.callArgs))
	copy(argCopy, mmGetCardsReviews.callArgs)

	mmGetCardsReviews.mutex.RUnlock()

	return argCopy
}

// MinimockGetCardsReviewsDone returns true if the count of the GetCardsReviews invocations corresponds
// the number of defined expectations
func (m *ReviewReaderMock) MinimockGetCardsReviewsDone() bool {
	if m.GetCardsReviewsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetCardsReviewsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetCardsReviewsMock.invocationsDone()
}

// MinimockGetCardsReviewsInspect logs each unmet expectation
func (m *ReviewReaderMock) MinimockGetCardsReviewsInspect() {
	for _, e := range m.GetCardsReviewsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ReviewReaderMock.GetCardsReviews at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCardsReviewsCounter := mm_atomic.LoadUint64(&m.afterGetCardsReviewsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetCardsReviewsMock.defaultExpectation != nil && afterGetCardsReviewsCounter < 1 {
		if m.GetCardsReviewsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ReviewReaderMock.GetCardsReviews at\n%s", m.GetCardsReviewsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ReviewReaderMock.GetCardsReviews at\n%s with params: %#v", m.GetCardsReviewsMock.defaultExpectation.expectationOrigins.origin, *m.GetCardsReviewsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCardsReviews != nil && afterGetCardsReviewsCounter < 1 {
		m.t.Errorf("Expected call to ReviewReaderMock.GetCardsReviews at\n%s", m.funcGetCardsReviewsOrigin)
	}

	if !m.GetCardsReviewsMock.invocationsDone() && afterGetCardsReviewsCounter > 0 {
		m.t.Errorf("Expected %d calls to ReviewReaderMock.GetCardsReviews at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetCardsReviewsMock.expectedInvocations), m.GetCardsReviewsMock.expectedInvocationsOrigin, afterGetCardsReviewsCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ReviewReaderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetCardsReviewsInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ReviewReaderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ReviewReaderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetCardsReviewsDone()
}
