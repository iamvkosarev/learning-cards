// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/iamvkosarev/learning-cards/internal/module.CardReadingProvider -o card_reading_provider_mock.go -n CardReadingProviderMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/iamvkosarev/learning-cards/internal/model"
)

// CardReadingProviderMock implements mm_module.CardReadingProvider
type CardReadingProviderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetCardReading          func(ctx context.Context, text string) (ra1 []model.ReadingPair, err error)
	funcGetCardReadingOrigin    string
	inspectFuncGetCardReading   func(ctx context.Context, text string)
	afterGetCardReadingCounter  uint64
	beforeGetCardReadingCounter uint64
	GetCardReadingMock          mCardReadingProviderMockGetCardReading
}

// NewCardReadingProviderMock returns a mock for mm_module.CardReadingProvider
func NewCardReadingProviderMock(t minimock.Tester) *CardReadingProviderMock {
	m := &CardReadingProviderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetCardReadingMock = mCardReadingProviderMockGetCardReading{mock: m}
	m.GetCardReadingMock.callArgs = []*CardReadingProviderMockGetCardReadingParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCardReadingProviderMockGetCardReading struct {
	optional           bool
	mock               *CardReadingProviderMock
	defaultExpectation *CardReadingProviderMockGetCardReadingExpectation
	expectations       []*CardReadingProviderMockGetCardReadingExpectation

	callArgs []*CardReadingProviderMockGetCardReadingParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CardReadingProviderMockGetCardReadingExpectation specifies expectation struct of the CardReadingProvider.GetCardReading
type CardReadingProviderMockGetCardReadingExpectation struct {
	mock               *CardReadingProviderMock
	params             *CardReadingProviderMockGetCardReadingParams
	paramPtrs          *CardReadingProviderMockGetCardReadingParamPtrs
	expectationOrigins CardReadingProviderMockGetCardReadingExpectationOrigins
	results            *CardReadingProviderMockGetCardReadingResults
	returnOrigin       string
	Counter            uint64
}

// CardReadingProviderMockGetCardReadingParams contains parameters of the CardReadingProvider.GetCardReading
type CardReadingProviderMockGetCardReadingParams struct {
	ctx  context.Context
	text string
}

// CardReadingProviderMockGetCardReadingParamPtrs contains pointers to parameters of the CardReadingProvider.GetCardReading
type CardReadingProviderMockGetCardReadingParamPtrs struct {
	ctx  *context.Context
	text *string
}

// CardReadingProviderMockGetCardReadingResults contains results of the CardReadingProvider.GetCardReading
type CardReadingProviderMockGetCardReadingResults struct {
	ra1 []model.ReadingPair
	err error
}

// CardReadingProviderMockGetCardReadingOrigins contains origins of expectations of the CardReadingProvider.GetCardReading
type CardReadingProviderMockGetCardReadingExpectationOrigins struct {
	origin     string
	originCtx  string
	originText string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetCardReading *mCardReadingProviderMockGetCardReading) Optional() *mCardReadingProviderMockGetCardReading {
	mmGetCardReading.optional = true
	return mmGetCardReading
}

// Expect sets up expected params for CardReadingProvider.GetCardReading
func (mmGetCardReading *mCardReadingProviderMockGetCardReading) Expect(ctx context.Context, text string) *mCardReadingProviderMockGetCardReading {
	if mmGetCardReading.mock.funcGetCardReading != nil {
		mmGetCardReading.mock.t.Fatalf("CardReadingProviderMock.GetCardReading mock is already set by Set")
	}

	if mmGetCardReading.defaultExpectation == nil {
		mmGetCardReading.defaultExpectation = &CardReadingProviderMockGetCardReadingExpectation{}
	}

	if mmGetCardReading.defaultExpectation.paramPtrs != nil {
		mmGetCardReading.mock.t.Fatalf("CardReadingProviderMock.GetCardReading mock is already set by ExpectParams functions")
	}

	mmGetCardReading.defaultExpectation.params = &CardReadingProviderMockGetCardReadingParams{ctx, text}
	mmGetCardReading.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetCardReading.expectations {
		if minimock.Equal(e.params, mmGetCardReading.defaultExpectation.params) {
			mmGetCardReading.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCardReading.defaultExpectation.params)
		}
	}

	return mmGetCardReading
}

// ExpectCtxParam1 sets up expected param ctx for CardReadingProvider.GetCardReading
func (mmGetCardReading *mCardReadingProviderMockGetCardReading) ExpectCtxParam1(ctx context.Context) *mCardReadingProviderMockGetCardReading {
	if mmGetCardReading.mock.funcGetCardReading != nil {
		mmGetCardReading.mock.t.Fatalf("CardReadingProviderMock.GetCardReading mock is already set by Set")
	}

	if mmGetCardReading.defaultExpectation == nil {
		mmGetCardReading.defaultExpectation = &CardReadingProviderMockGetCardReadingExpectation{}
	}

	if mmGetCardReading.defaultExpectation.params != nil {
		mmGetCardReading.mock.t.Fatalf("CardReadingProviderMock.GetCardReading mock is already set by Expect")
	}

	if mmGetCardReading.defaultExpectation.paramPtrs == nil {
		mmGetCardReading.defaultExpectation.paramPtrs = &CardReadingProviderMockGetCardReadingParamPtrs{}
	}
	mmGetCardReading.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetCardReading.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetCardReading
}

// ExpectTextParam2 sets up expected param text for CardReadingProvider.GetCardReading
func (mmGetCardReading *mCardReadingProviderMockGetCardReading) ExpectTextParam2(text string) *mCardReadingProviderMockGetCardReading {
	if mmGetCardReading.mock.funcGetCardReading != nil {
		mmGetCardReading.mock.t.Fatalf("CardReadingProviderMock.GetCardReading mock is already set by Set")
	}

	if mmGetCardReading.defaultExpectation == nil {
		mmGetCardReading.defaultExpectation = &CardReadingProviderMockGetCardReadingExpectation{}
	}

	if mmGetCardReading.defaultExpectation.params != nil {
		mmGetCardReading.mock.t.Fatalf("CardReadingProviderMock.GetCardReading mock is already set by Expect")
	}

	if mmGetCardReading.defaultExpectation.paramPtrs == nil {
		mmGetCardReading.defaultExpectation.paramPtrs = &CardReadingProviderMockGetCardReadingParamPtrs{}
	}
	mmGetCardReading.defaultExpectation.paramPtrs.text = &text
	mmGetCardReading.defaultExpectation.expectationOrigins.originText = minimock.CallerInfo(1)

	return mmGetCardReading
}

// Inspect accepts an inspector function that has same arguments as the CardReadingProvider.GetCardReading
func (mmGetCardReading *mCardReadingProviderMockGetCardReading) Inspect(f func(ctx context.Context, text string)) *mCardReadingProviderMockGetCardReading {
	if mmGetCardReading.mock.inspectFuncGetCardReading != nil {
		mmGetCardReading.mock.t.Fatalf("Inspect function is already set for CardReadingProviderMock.GetCardReading")
	}

	mmGetCardReading.mock.inspectFuncGetCardReading = f

	return mmGetCardReading
}

// Return sets up results that will be returned by CardReadingProvider.GetCardReading
func (mmGetCardReading *mCardReadingProviderMockGetCardReading) Return(ra1 []model.ReadingPair, err error) *CardReadingProviderMock {
	if mmGetCardReading.mock.funcGetCardReading != nil {
		mmGetCardReading.mock.t.Fatalf("CardReadingProviderMock.GetCardReading mock is already set by Set")
	}

	if mmGetCardReading.defaultExpectation == nil {
		mmGetCardReading.defaultExpectation = &CardReadingProviderMockGetCardReadingExpectation{mock: mmGetCardReading.mock}
	}
	mmGetCardReading.defaultExpectation.results = &CardReadingProviderMockGetCardReadingResults{ra1, err}
	mmGetCardReading.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetCardReading.mock
}

// Set uses given function f to mock the CardReadingProvider.GetCardReading method
func (mmGetCardReading *mCardReadingProviderMockGetCardReading) Set(f func(ctx context.Context, text string) (ra1 []model.ReadingPair, err error)) *CardReadingProviderMock {
	if mmGetCardReading.defaultExpectation != nil {
		mmGetCardReading.mock.t.Fatalf("Default expectation is already set for the CardReadingProvider.GetCardReading method")
	}

	if len(mmGetCardReading.expectations) > 0 {
		mmGetCardReading.mock.t.Fatalf("Some expectations are already set for the CardReadingProvider.GetCardReading method")
	}

	mmGetCardReading.mock.funcGetCardReading = f
	mmGetCardReading.mock.funcGetCardReadingOrigin = minimock.CallerInfo(1)
	return mmGetCardReading.mock
}

// When sets expectation for the CardReadingProvider.GetCardReading which will trigger the result defined by the following
// Then helper
func (mmGetCardReading *mCardReadingProviderMockGetCardReading) When(ctx context.Context, text string) *CardReadingProviderMockGetCardReadingExpectation {
	if mmGetCardReading.mock.funcGetCardReading != nil {
		mmGetCardReading.mock.t.Fatalf("CardReadingProviderMock.GetCardReading mock is already set by Set")
	}

	expectation := &CardReadingProviderMockGetCardReadingExpectation{
		mock:               mmGetCardReading.mock,
		params:             &CardReadingProviderMockGetCardReadingParams{ctx, text},
		expectationOrigins: CardReadingProviderMockGetCardReadingExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetCardReading.expectations = append(mmGetCardReading.expectations, expectation)
	return expectation
}

// Then sets up CardReadingProvider.GetCardReading return parameters for the expectation previously defined by the When method
func (e *CardReadingProviderMockGetCardReadingExpectation) Then(ra1 []model.ReadingPair, err error) *CardReadingProviderMock {
	e.results = &CardReadingProviderMockGetCardReadingResults{ra1, err}
	return e.mock
}

// Times sets number of times CardReadingProvider.GetCardReading should be invoked
func (mmGetCardReading *mCardReadingProviderMockGetCardReading) Times(n uint64) *mCardReadingProviderMockGetCardReading {
	if n == 0 {
		mmGetCardReading.mock.t.Fatalf("Times of CardReadingProviderMock.GetCardReading mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetCardReading.expectedInvocations, n)
	mmGetCardReading.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetCardReading
}

func (mmGetCardReading *mCardReadingProviderMockGetCardReading) invocationsDone() bool {
	if len(mmGetCardReading.expectations) == 0 && mmGetCardReading.defaultExpectation == nil && mmGetCardReading.mock.funcGetCardReading == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetCardReading.mock.afterGetCardReadingCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetCardReading.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetCardReading implements mm_module.CardReadingProvider
func (mmGetCardReading *CardReadingProviderMock) GetCardReading(ctx context.Context, text string) (ra1 []model.ReadingPair, err error) {
	mm_atomic.AddUint64(&mmGetCardReading.beforeGetCardReadingCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCardReading.afterGetCardReadingCounter, 1)

	mmGetCardReading.t.Helper()

	if mmGetCardReading.inspectFuncGetCardReading != nil {
		mmGetCardReading.inspectFuncGetCardReading(ctx, text)
	}

	mm_params := CardReadingProviderMockGetCardReadingParams{ctx, text}

	// Record call args
	mmGetCardReading.GetCardReadingMock.mutex.Lock()
	mmGetCardReading.GetCardReadingMock.callArgs = append(mmGetCardReading.GetCardReadingMock.callArgs, &mm_params)
	mmGetCardReading.GetCardReadingMock.mutex.Unlock()

	for _, e := range mmGetCardReading.GetCardReadingMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ra1, e.results.err
		}
	}

	if mmGetCardReading.GetCardReadingMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCardReading.GetCardReadingMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCardReading.GetCardReadingMock.defaultExpectation.params
		mm_want_ptrs := mmGetCardReading.GetCardReadingMock.defaultExpectation.paramPtrs

		mm_got := CardReadingProviderMockGetCardReadingParams{ctx, text}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetCardReading.t.Errorf("CardReadingProviderMock.GetCardReading got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCardReading.GetCardReadingMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.text != nil && !minimock.Equal(*mm_want_ptrs.text, mm_got.text) {
				mmGetCardReading.t.Errorf("CardReadingProviderMock.GetCardReading got unexpected parameter text, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCardReading.GetCardReadingMock.defaultExpectation.expectationOrigins.originText, *mm_want_ptrs.text, mm_got.text, minimock.Diff(*mm_want_ptrs.text, mm_got.text))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCardReading.t.Errorf("CardReadingProviderMock.GetCardReading got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetCardReading.GetCardReadingMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCardReading.GetCardReadingMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCardReading.t.Fatal("No results are set for the CardReadingProviderMock.GetCardReading")
		}
		return (*mm_results).ra1, (*mm_results).err
	}
	if mmGetCardReading.funcGetCardReading != nil {
		return mmGetCardReading.funcGetCardReading(ctx, text)
	}
	mmGetCardReading.t.Fatalf("Unexpected call to CardReadingProviderMock.GetCardReading. %v %v", ctx, text)
	return
}

// GetCardReadingAfterCounter returns a count of finished CardReadingProviderMock.GetCardReading invocations
func (mmGetCardReading *CardReadingProviderMock) GetCardReadingAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCardReading.afterGetCardReadingCounter)
}

// GetCardReadingBeforeCounter returns a count of CardReadingProviderMock.GetCardReading invocations
func (mmGetCardReading *CardReadingProviderMock) GetCardReadingBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCardReading.beforeGetCardReadingCounter)
}

// Calls returns a list of arguments used in each call to CardReadingProviderMock.GetCardReading.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCardReading *mCardReadingProviderMockGetCardReading) Calls() []*CardReadingProviderMockGetCardReadingParams {
	mmGetCardReading.mutex.RLock()

	argCopy := make([]*CardReadingProviderMockGetCardReadingParams, len(mmGetCardReading.callArgs))
	copy(argCopy, mmGetCardReading.callArgs)

	mmGetCardReading.mutex.RUnlock()

	return argCopy
}

// MinimockGetCardReadingDone returns true if the count of the GetCardReading invocations corresponds
// the number of defined expectations
func (m *CardReadingProviderMock) MinimockGetCardReadingDone() bool {
	if m.GetCardReadingMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetCardReadingMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetCardReadingMock.invocationsDone()
}

// MinimockGetCardReadingInspect logs each unmet expectation
func (m *CardReadingProviderMock) MinimockGetCardReadingInspect() {
	for _, e := range m.GetCardReadingMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CardReadingProviderMock.GetCardReading at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCardReadingCounter := mm_atomic.LoadUint64(&m.afterGetCardReadingCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetCardReadingMock.defaultExpectation != nil && afterGetCardReadingCounter < 1 {
		if m.GetCardReadingMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CardReadingProviderMock.GetCardReading at\n%s", m.GetCardReadingMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CardReadingProviderMock.GetCardReading at\n%s with params: %#v", m.GetCardReadingMock.defaultExpectation.expectationOrigins.origin, *m.GetCardReadingMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCardReading != nil && afterGetCardReadingCounter < 1 {
		m.t.Errorf("Expected call to CardReadingProviderMock.GetCardReading at\n%s", m.funcGetCardReadingOrigin)
	}

	if !m.GetCardReadingMock.invocationsDone() && afterGetCardReadingCounter > 0 {
		m.t.Errorf("Expected %d calls to CardReadingProviderMock.GetCardReading at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetCardReadingMock.expectedInvocations), m.GetCardReadingMock.expectedInvocationsOrigin, afterGetCardReadingCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CardReadingProviderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetCardReadingInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CardReadingProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CardReadingProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetCardReadingDone()
}
