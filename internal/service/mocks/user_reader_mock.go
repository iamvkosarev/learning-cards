// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/iamvkosarev/learning-cards/internal/service.UserWriter -o user_reader_mock.go -n UserWriterMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/iamvkosarev/learning-cards/internal/domain/entity"
)

// UserWriterMock implements mm_service.UserWriter
type UserWriterMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddUser          func(ctx context.Context, user entity.User) (err error)
	funcAddUserOrigin    string
	inspectFuncAddUser   func(ctx context.Context, user entity.User)
	afterAddUserCounter  uint64
	beforeAddUserCounter uint64
	AddUserMock          mUserWriterMockAddUser
}

// NewUserWriterMock returns a mock for mm_service.UserWriter
func NewUserWriterMock(t minimock.Tester) *UserWriterMock {
	m := &UserWriterMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddUserMock = mUserWriterMockAddUser{mock: m}
	m.AddUserMock.callArgs = []*UserWriterMockAddUserParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserWriterMockAddUser struct {
	optional           bool
	mock               *UserWriterMock
	defaultExpectation *UserWriterMockAddUserExpectation
	expectations       []*UserWriterMockAddUserExpectation

	callArgs []*UserWriterMockAddUserParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserWriterMockAddUserExpectation specifies expectation struct of the UserWriter.AddUser
type UserWriterMockAddUserExpectation struct {
	mock               *UserWriterMock
	params             *UserWriterMockAddUserParams
	paramPtrs          *UserWriterMockAddUserParamPtrs
	expectationOrigins UserWriterMockAddUserExpectationOrigins
	results            *UserWriterMockAddUserResults
	returnOrigin       string
	Counter            uint64
}

// UserWriterMockAddUserParams contains parameters of the UserWriter.AddUser
type UserWriterMockAddUserParams struct {
	ctx  context.Context
	user entity.User
}

// UserWriterMockAddUserParamPtrs contains pointers to parameters of the UserWriter.AddUser
type UserWriterMockAddUserParamPtrs struct {
	ctx  *context.Context
	user *entity.User
}

// UserWriterMockAddUserResults contains results of the UserWriter.AddUser
type UserWriterMockAddUserResults struct {
	err error
}

// UserWriterMockAddUserOrigins contains origins of expectations of the UserWriter.AddUser
type UserWriterMockAddUserExpectationOrigins struct {
	origin     string
	originCtx  string
	originUser string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddUser *mUserWriterMockAddUser) Optional() *mUserWriterMockAddUser {
	mmAddUser.optional = true
	return mmAddUser
}

// Expect sets up expected params for UserWriter.AddUser
func (mmAddUser *mUserWriterMockAddUser) Expect(ctx context.Context, user entity.User) *mUserWriterMockAddUser {
	if mmAddUser.mock.funcAddUser != nil {
		mmAddUser.mock.t.Fatalf("UserWriterMock.AddUser mock is already set by Set")
	}

	if mmAddUser.defaultExpectation == nil {
		mmAddUser.defaultExpectation = &UserWriterMockAddUserExpectation{}
	}

	if mmAddUser.defaultExpectation.paramPtrs != nil {
		mmAddUser.mock.t.Fatalf("UserWriterMock.AddUser mock is already set by ExpectParams functions")
	}

	mmAddUser.defaultExpectation.params = &UserWriterMockAddUserParams{ctx, user}
	mmAddUser.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddUser.expectations {
		if minimock.Equal(e.params, mmAddUser.defaultExpectation.params) {
			mmAddUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddUser.defaultExpectation.params)
		}
	}

	return mmAddUser
}

// ExpectCtxParam1 sets up expected param ctx for UserWriter.AddUser
func (mmAddUser *mUserWriterMockAddUser) ExpectCtxParam1(ctx context.Context) *mUserWriterMockAddUser {
	if mmAddUser.mock.funcAddUser != nil {
		mmAddUser.mock.t.Fatalf("UserWriterMock.AddUser mock is already set by Set")
	}

	if mmAddUser.defaultExpectation == nil {
		mmAddUser.defaultExpectation = &UserWriterMockAddUserExpectation{}
	}

	if mmAddUser.defaultExpectation.params != nil {
		mmAddUser.mock.t.Fatalf("UserWriterMock.AddUser mock is already set by Expect")
	}

	if mmAddUser.defaultExpectation.paramPtrs == nil {
		mmAddUser.defaultExpectation.paramPtrs = &UserWriterMockAddUserParamPtrs{}
	}
	mmAddUser.defaultExpectation.paramPtrs.ctx = &ctx
	mmAddUser.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAddUser
}

// ExpectUserParam2 sets up expected param user for UserWriter.AddUser
func (mmAddUser *mUserWriterMockAddUser) ExpectUserParam2(user entity.User) *mUserWriterMockAddUser {
	if mmAddUser.mock.funcAddUser != nil {
		mmAddUser.mock.t.Fatalf("UserWriterMock.AddUser mock is already set by Set")
	}

	if mmAddUser.defaultExpectation == nil {
		mmAddUser.defaultExpectation = &UserWriterMockAddUserExpectation{}
	}

	if mmAddUser.defaultExpectation.params != nil {
		mmAddUser.mock.t.Fatalf("UserWriterMock.AddUser mock is already set by Expect")
	}

	if mmAddUser.defaultExpectation.paramPtrs == nil {
		mmAddUser.defaultExpectation.paramPtrs = &UserWriterMockAddUserParamPtrs{}
	}
	mmAddUser.defaultExpectation.paramPtrs.user = &user
	mmAddUser.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmAddUser
}

// Inspect accepts an inspector function that has same arguments as the UserWriter.AddUser
func (mmAddUser *mUserWriterMockAddUser) Inspect(f func(ctx context.Context, user entity.User)) *mUserWriterMockAddUser {
	if mmAddUser.mock.inspectFuncAddUser != nil {
		mmAddUser.mock.t.Fatalf("Inspect function is already set for UserWriterMock.AddUser")
	}

	mmAddUser.mock.inspectFuncAddUser = f

	return mmAddUser
}

// Return sets up results that will be returned by UserWriter.AddUser
func (mmAddUser *mUserWriterMockAddUser) Return(err error) *UserWriterMock {
	if mmAddUser.mock.funcAddUser != nil {
		mmAddUser.mock.t.Fatalf("UserWriterMock.AddUser mock is already set by Set")
	}

	if mmAddUser.defaultExpectation == nil {
		mmAddUser.defaultExpectation = &UserWriterMockAddUserExpectation{mock: mmAddUser.mock}
	}
	mmAddUser.defaultExpectation.results = &UserWriterMockAddUserResults{err}
	mmAddUser.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddUser.mock
}

// Set uses given function f to mock the UserWriter.AddUser method
func (mmAddUser *mUserWriterMockAddUser) Set(f func(ctx context.Context, user entity.User) (err error)) *UserWriterMock {
	if mmAddUser.defaultExpectation != nil {
		mmAddUser.mock.t.Fatalf("Default expectation is already set for the UserWriter.AddUser method")
	}

	if len(mmAddUser.expectations) > 0 {
		mmAddUser.mock.t.Fatalf("Some expectations are already set for the UserWriter.AddUser method")
	}

	mmAddUser.mock.funcAddUser = f
	mmAddUser.mock.funcAddUserOrigin = minimock.CallerInfo(1)
	return mmAddUser.mock
}

// When sets expectation for the UserWriter.AddUser which will trigger the result defined by the following
// Then helper
func (mmAddUser *mUserWriterMockAddUser) When(ctx context.Context, user entity.User) *UserWriterMockAddUserExpectation {
	if mmAddUser.mock.funcAddUser != nil {
		mmAddUser.mock.t.Fatalf("UserWriterMock.AddUser mock is already set by Set")
	}

	expectation := &UserWriterMockAddUserExpectation{
		mock:               mmAddUser.mock,
		params:             &UserWriterMockAddUserParams{ctx, user},
		expectationOrigins: UserWriterMockAddUserExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddUser.expectations = append(mmAddUser.expectations, expectation)
	return expectation
}

// Then sets up UserWriter.AddUser return parameters for the expectation previously defined by the When method
func (e *UserWriterMockAddUserExpectation) Then(err error) *UserWriterMock {
	e.results = &UserWriterMockAddUserResults{err}
	return e.mock
}

// Times sets number of times UserWriter.AddUser should be invoked
func (mmAddUser *mUserWriterMockAddUser) Times(n uint64) *mUserWriterMockAddUser {
	if n == 0 {
		mmAddUser.mock.t.Fatalf("Times of UserWriterMock.AddUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddUser.expectedInvocations, n)
	mmAddUser.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddUser
}

func (mmAddUser *mUserWriterMockAddUser) invocationsDone() bool {
	if len(mmAddUser.expectations) == 0 && mmAddUser.defaultExpectation == nil && mmAddUser.mock.funcAddUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddUser.mock.afterAddUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddUser implements mm_service.UserWriter
func (mmAddUser *UserWriterMock) AddUser(ctx context.Context, user entity.User) (err error) {
	mm_atomic.AddUint64(&mmAddUser.beforeAddUserCounter, 1)
	defer mm_atomic.AddUint64(&mmAddUser.afterAddUserCounter, 1)

	mmAddUser.t.Helper()

	if mmAddUser.inspectFuncAddUser != nil {
		mmAddUser.inspectFuncAddUser(ctx, user)
	}

	mm_params := UserWriterMockAddUserParams{ctx, user}

	// Record call args
	mmAddUser.AddUserMock.mutex.Lock()
	mmAddUser.AddUserMock.callArgs = append(mmAddUser.AddUserMock.callArgs, &mm_params)
	mmAddUser.AddUserMock.mutex.Unlock()

	for _, e := range mmAddUser.AddUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddUser.AddUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddUser.AddUserMock.defaultExpectation.Counter, 1)
		mm_want := mmAddUser.AddUserMock.defaultExpectation.params
		mm_want_ptrs := mmAddUser.AddUserMock.defaultExpectation.paramPtrs

		mm_got := UserWriterMockAddUserParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddUser.t.Errorf("UserWriterMock.AddUser got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddUser.AddUserMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmAddUser.t.Errorf("UserWriterMock.AddUser got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddUser.AddUserMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddUser.t.Errorf("UserWriterMock.AddUser got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddUser.AddUserMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddUser.AddUserMock.defaultExpectation.results
		if mm_results == nil {
			mmAddUser.t.Fatal("No results are set for the UserWriterMock.AddUser")
		}
		return (*mm_results).err
	}
	if mmAddUser.funcAddUser != nil {
		return mmAddUser.funcAddUser(ctx, user)
	}
	mmAddUser.t.Fatalf("Unexpected call to UserWriterMock.AddUser. %v %v", ctx, user)
	return
}

// AddUserAfterCounter returns a count of finished UserWriterMock.AddUser invocations
func (mmAddUser *UserWriterMock) AddUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUser.afterAddUserCounter)
}

// AddUserBeforeCounter returns a count of UserWriterMock.AddUser invocations
func (mmAddUser *UserWriterMock) AddUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddUser.beforeAddUserCounter)
}

// Calls returns a list of arguments used in each call to UserWriterMock.AddUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddUser *mUserWriterMockAddUser) Calls() []*UserWriterMockAddUserParams {
	mmAddUser.mutex.RLock()

	argCopy := make([]*UserWriterMockAddUserParams, len(mmAddUser.callArgs))
	copy(argCopy, mmAddUser.callArgs)

	mmAddUser.mutex.RUnlock()

	return argCopy
}

// MinimockAddUserDone returns true if the count of the AddUser invocations corresponds
// the number of defined expectations
func (m *UserWriterMock) MinimockAddUserDone() bool {
	if m.AddUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddUserMock.invocationsDone()
}

// MinimockAddUserInspect logs each unmet expectation
func (m *UserWriterMock) MinimockAddUserInspect() {
	for _, e := range m.AddUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserWriterMock.AddUser at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddUserCounter := mm_atomic.LoadUint64(&m.afterAddUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddUserMock.defaultExpectation != nil && afterAddUserCounter < 1 {
		if m.AddUserMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserWriterMock.AddUser at\n%s", m.AddUserMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserWriterMock.AddUser at\n%s with params: %#v", m.AddUserMock.defaultExpectation.expectationOrigins.origin, *m.AddUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddUser != nil && afterAddUserCounter < 1 {
		m.t.Errorf("Expected call to UserWriterMock.AddUser at\n%s", m.funcAddUserOrigin)
	}

	if !m.AddUserMock.invocationsDone() && afterAddUserCounter > 0 {
		m.t.Errorf("Expected %d calls to UserWriterMock.AddUser at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddUserMock.expectedInvocations), m.AddUserMock.expectedInvocationsOrigin, afterAddUserCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserWriterMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddUserInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserWriterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserWriterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddUserDone()
}
