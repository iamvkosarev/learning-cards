// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/iamvkosarev/learning-cards/internal/service.ProgressWriter -o progress_writer_mock.go -n ProgressWriterMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/iamvkosarev/learning-cards/internal/domain/entity"
)

// ProgressWriterMock implements mm_service.ProgressWriter
type ProgressWriterMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcUpdateCardsProgress          func(ctx context.Context, user entity.UserId, group entity.GroupId, cardsProgress []entity.CardProgress) (err error)
	funcUpdateCardsProgressOrigin    string
	inspectFuncUpdateCardsProgress   func(ctx context.Context, user entity.UserId, group entity.GroupId, cardsProgress []entity.CardProgress)
	afterUpdateCardsProgressCounter  uint64
	beforeUpdateCardsProgressCounter uint64
	UpdateCardsProgressMock          mProgressWriterMockUpdateCardsProgress
}

// NewProgressWriterMock returns a mock for mm_service.ProgressWriter
func NewProgressWriterMock(t minimock.Tester) *ProgressWriterMock {
	m := &ProgressWriterMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.UpdateCardsProgressMock = mProgressWriterMockUpdateCardsProgress{mock: m}
	m.UpdateCardsProgressMock.callArgs = []*ProgressWriterMockUpdateCardsProgressParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProgressWriterMockUpdateCardsProgress struct {
	optional           bool
	mock               *ProgressWriterMock
	defaultExpectation *ProgressWriterMockUpdateCardsProgressExpectation
	expectations       []*ProgressWriterMockUpdateCardsProgressExpectation

	callArgs []*ProgressWriterMockUpdateCardsProgressParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProgressWriterMockUpdateCardsProgressExpectation specifies expectation struct of the ProgressWriter.UpdateCardsProgress
type ProgressWriterMockUpdateCardsProgressExpectation struct {
	mock               *ProgressWriterMock
	params             *ProgressWriterMockUpdateCardsProgressParams
	paramPtrs          *ProgressWriterMockUpdateCardsProgressParamPtrs
	expectationOrigins ProgressWriterMockUpdateCardsProgressExpectationOrigins
	results            *ProgressWriterMockUpdateCardsProgressResults
	returnOrigin       string
	Counter            uint64
}

// ProgressWriterMockUpdateCardsProgressParams contains parameters of the ProgressWriter.UpdateCardsProgress
type ProgressWriterMockUpdateCardsProgressParams struct {
	ctx           context.Context
	user          entity.UserId
	group         entity.GroupId
	cardsProgress []entity.CardProgress
}

// ProgressWriterMockUpdateCardsProgressParamPtrs contains pointers to parameters of the ProgressWriter.UpdateCardsProgress
type ProgressWriterMockUpdateCardsProgressParamPtrs struct {
	ctx           *context.Context
	user          *entity.UserId
	group         *entity.GroupId
	cardsProgress *[]entity.CardProgress
}

// ProgressWriterMockUpdateCardsProgressResults contains results of the ProgressWriter.UpdateCardsProgress
type ProgressWriterMockUpdateCardsProgressResults struct {
	err error
}

// ProgressWriterMockUpdateCardsProgressOrigins contains origins of expectations of the ProgressWriter.UpdateCardsProgress
type ProgressWriterMockUpdateCardsProgressExpectationOrigins struct {
	origin              string
	originCtx           string
	originUser          string
	originGroup         string
	originCardsProgress string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) Optional() *mProgressWriterMockUpdateCardsProgress {
	mmUpdateCardsProgress.optional = true
	return mmUpdateCardsProgress
}

// Expect sets up expected params for ProgressWriter.UpdateCardsProgress
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) Expect(ctx context.Context, user entity.UserId, group entity.GroupId, cardsProgress []entity.CardProgress) *mProgressWriterMockUpdateCardsProgress {
	if mmUpdateCardsProgress.mock.funcUpdateCardsProgress != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by Set")
	}

	if mmUpdateCardsProgress.defaultExpectation == nil {
		mmUpdateCardsProgress.defaultExpectation = &ProgressWriterMockUpdateCardsProgressExpectation{}
	}

	if mmUpdateCardsProgress.defaultExpectation.paramPtrs != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by ExpectParams functions")
	}

	mmUpdateCardsProgress.defaultExpectation.params = &ProgressWriterMockUpdateCardsProgressParams{ctx, user, group, cardsProgress}
	mmUpdateCardsProgress.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmUpdateCardsProgress.expectations {
		if minimock.Equal(e.params, mmUpdateCardsProgress.defaultExpectation.params) {
			mmUpdateCardsProgress.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateCardsProgress.defaultExpectation.params)
		}
	}

	return mmUpdateCardsProgress
}

// ExpectCtxParam1 sets up expected param ctx for ProgressWriter.UpdateCardsProgress
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) ExpectCtxParam1(ctx context.Context) *mProgressWriterMockUpdateCardsProgress {
	if mmUpdateCardsProgress.mock.funcUpdateCardsProgress != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by Set")
	}

	if mmUpdateCardsProgress.defaultExpectation == nil {
		mmUpdateCardsProgress.defaultExpectation = &ProgressWriterMockUpdateCardsProgressExpectation{}
	}

	if mmUpdateCardsProgress.defaultExpectation.params != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by Expect")
	}

	if mmUpdateCardsProgress.defaultExpectation.paramPtrs == nil {
		mmUpdateCardsProgress.defaultExpectation.paramPtrs = &ProgressWriterMockUpdateCardsProgressParamPtrs{}
	}
	mmUpdateCardsProgress.defaultExpectation.paramPtrs.ctx = &ctx
	mmUpdateCardsProgress.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmUpdateCardsProgress
}

// ExpectUserParam2 sets up expected param user for ProgressWriter.UpdateCardsProgress
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) ExpectUserParam2(user entity.UserId) *mProgressWriterMockUpdateCardsProgress {
	if mmUpdateCardsProgress.mock.funcUpdateCardsProgress != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by Set")
	}

	if mmUpdateCardsProgress.defaultExpectation == nil {
		mmUpdateCardsProgress.defaultExpectation = &ProgressWriterMockUpdateCardsProgressExpectation{}
	}

	if mmUpdateCardsProgress.defaultExpectation.params != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by Expect")
	}

	if mmUpdateCardsProgress.defaultExpectation.paramPtrs == nil {
		mmUpdateCardsProgress.defaultExpectation.paramPtrs = &ProgressWriterMockUpdateCardsProgressParamPtrs{}
	}
	mmUpdateCardsProgress.defaultExpectation.paramPtrs.user = &user
	mmUpdateCardsProgress.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmUpdateCardsProgress
}

// ExpectGroupParam3 sets up expected param group for ProgressWriter.UpdateCardsProgress
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) ExpectGroupParam3(group entity.GroupId) *mProgressWriterMockUpdateCardsProgress {
	if mmUpdateCardsProgress.mock.funcUpdateCardsProgress != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by Set")
	}

	if mmUpdateCardsProgress.defaultExpectation == nil {
		mmUpdateCardsProgress.defaultExpectation = &ProgressWriterMockUpdateCardsProgressExpectation{}
	}

	if mmUpdateCardsProgress.defaultExpectation.params != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by Expect")
	}

	if mmUpdateCardsProgress.defaultExpectation.paramPtrs == nil {
		mmUpdateCardsProgress.defaultExpectation.paramPtrs = &ProgressWriterMockUpdateCardsProgressParamPtrs{}
	}
	mmUpdateCardsProgress.defaultExpectation.paramPtrs.group = &group
	mmUpdateCardsProgress.defaultExpectation.expectationOrigins.originGroup = minimock.CallerInfo(1)

	return mmUpdateCardsProgress
}

// ExpectCardsProgressParam4 sets up expected param cardsProgress for ProgressWriter.UpdateCardsProgress
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) ExpectCardsProgressParam4(cardsProgress []entity.CardProgress) *mProgressWriterMockUpdateCardsProgress {
	if mmUpdateCardsProgress.mock.funcUpdateCardsProgress != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by Set")
	}

	if mmUpdateCardsProgress.defaultExpectation == nil {
		mmUpdateCardsProgress.defaultExpectation = &ProgressWriterMockUpdateCardsProgressExpectation{}
	}

	if mmUpdateCardsProgress.defaultExpectation.params != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by Expect")
	}

	if mmUpdateCardsProgress.defaultExpectation.paramPtrs == nil {
		mmUpdateCardsProgress.defaultExpectation.paramPtrs = &ProgressWriterMockUpdateCardsProgressParamPtrs{}
	}
	mmUpdateCardsProgress.defaultExpectation.paramPtrs.cardsProgress = &cardsProgress
	mmUpdateCardsProgress.defaultExpectation.expectationOrigins.originCardsProgress = minimock.CallerInfo(1)

	return mmUpdateCardsProgress
}

// Inspect accepts an inspector function that has same arguments as the ProgressWriter.UpdateCardsProgress
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) Inspect(f func(ctx context.Context, user entity.UserId, group entity.GroupId, cardsProgress []entity.CardProgress)) *mProgressWriterMockUpdateCardsProgress {
	if mmUpdateCardsProgress.mock.inspectFuncUpdateCardsProgress != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("Inspect function is already set for ProgressWriterMock.UpdateCardsProgress")
	}

	mmUpdateCardsProgress.mock.inspectFuncUpdateCardsProgress = f

	return mmUpdateCardsProgress
}

// Return sets up results that will be returned by ProgressWriter.UpdateCardsProgress
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) Return(err error) *ProgressWriterMock {
	if mmUpdateCardsProgress.mock.funcUpdateCardsProgress != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by Set")
	}

	if mmUpdateCardsProgress.defaultExpectation == nil {
		mmUpdateCardsProgress.defaultExpectation = &ProgressWriterMockUpdateCardsProgressExpectation{mock: mmUpdateCardsProgress.mock}
	}
	mmUpdateCardsProgress.defaultExpectation.results = &ProgressWriterMockUpdateCardsProgressResults{err}
	mmUpdateCardsProgress.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmUpdateCardsProgress.mock
}

// Set uses given function f to mock the ProgressWriter.UpdateCardsProgress method
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) Set(f func(ctx context.Context, user entity.UserId, group entity.GroupId, cardsProgress []entity.CardProgress) (err error)) *ProgressWriterMock {
	if mmUpdateCardsProgress.defaultExpectation != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("Default expectation is already set for the ProgressWriter.UpdateCardsProgress method")
	}

	if len(mmUpdateCardsProgress.expectations) > 0 {
		mmUpdateCardsProgress.mock.t.Fatalf("Some expectations are already set for the ProgressWriter.UpdateCardsProgress method")
	}

	mmUpdateCardsProgress.mock.funcUpdateCardsProgress = f
	mmUpdateCardsProgress.mock.funcUpdateCardsProgressOrigin = minimock.CallerInfo(1)
	return mmUpdateCardsProgress.mock
}

// When sets expectation for the ProgressWriter.UpdateCardsProgress which will trigger the result defined by the following
// Then helper
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) When(ctx context.Context, user entity.UserId, group entity.GroupId, cardsProgress []entity.CardProgress) *ProgressWriterMockUpdateCardsProgressExpectation {
	if mmUpdateCardsProgress.mock.funcUpdateCardsProgress != nil {
		mmUpdateCardsProgress.mock.t.Fatalf("ProgressWriterMock.UpdateCardsProgress mock is already set by Set")
	}

	expectation := &ProgressWriterMockUpdateCardsProgressExpectation{
		mock:               mmUpdateCardsProgress.mock,
		params:             &ProgressWriterMockUpdateCardsProgressParams{ctx, user, group, cardsProgress},
		expectationOrigins: ProgressWriterMockUpdateCardsProgressExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmUpdateCardsProgress.expectations = append(mmUpdateCardsProgress.expectations, expectation)
	return expectation
}

// Then sets up ProgressWriter.UpdateCardsProgress return parameters for the expectation previously defined by the When method
func (e *ProgressWriterMockUpdateCardsProgressExpectation) Then(err error) *ProgressWriterMock {
	e.results = &ProgressWriterMockUpdateCardsProgressResults{err}
	return e.mock
}

// Times sets number of times ProgressWriter.UpdateCardsProgress should be invoked
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) Times(n uint64) *mProgressWriterMockUpdateCardsProgress {
	if n == 0 {
		mmUpdateCardsProgress.mock.t.Fatalf("Times of ProgressWriterMock.UpdateCardsProgress mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmUpdateCardsProgress.expectedInvocations, n)
	mmUpdateCardsProgress.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmUpdateCardsProgress
}

func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) invocationsDone() bool {
	if len(mmUpdateCardsProgress.expectations) == 0 && mmUpdateCardsProgress.defaultExpectation == nil && mmUpdateCardsProgress.mock.funcUpdateCardsProgress == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmUpdateCardsProgress.mock.afterUpdateCardsProgressCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmUpdateCardsProgress.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// UpdateCardsProgress implements mm_service.ProgressWriter
func (mmUpdateCardsProgress *ProgressWriterMock) UpdateCardsProgress(ctx context.Context, user entity.UserId, group entity.GroupId, cardsProgress []entity.CardProgress) (err error) {
	mm_atomic.AddUint64(&mmUpdateCardsProgress.beforeUpdateCardsProgressCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateCardsProgress.afterUpdateCardsProgressCounter, 1)

	mmUpdateCardsProgress.t.Helper()

	if mmUpdateCardsProgress.inspectFuncUpdateCardsProgress != nil {
		mmUpdateCardsProgress.inspectFuncUpdateCardsProgress(ctx, user, group, cardsProgress)
	}

	mm_params := ProgressWriterMockUpdateCardsProgressParams{ctx, user, group, cardsProgress}

	// Record call args
	mmUpdateCardsProgress.UpdateCardsProgressMock.mutex.Lock()
	mmUpdateCardsProgress.UpdateCardsProgressMock.callArgs = append(mmUpdateCardsProgress.UpdateCardsProgressMock.callArgs, &mm_params)
	mmUpdateCardsProgress.UpdateCardsProgressMock.mutex.Unlock()

	for _, e := range mmUpdateCardsProgress.UpdateCardsProgressMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdateCardsProgress.UpdateCardsProgressMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateCardsProgress.UpdateCardsProgressMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateCardsProgress.UpdateCardsProgressMock.defaultExpectation.params
		mm_want_ptrs := mmUpdateCardsProgress.UpdateCardsProgressMock.defaultExpectation.paramPtrs

		mm_got := ProgressWriterMockUpdateCardsProgressParams{ctx, user, group, cardsProgress}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmUpdateCardsProgress.t.Errorf("ProgressWriterMock.UpdateCardsProgress got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateCardsProgress.UpdateCardsProgressMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmUpdateCardsProgress.t.Errorf("ProgressWriterMock.UpdateCardsProgress got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateCardsProgress.UpdateCardsProgressMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

			if mm_want_ptrs.group != nil && !minimock.Equal(*mm_want_ptrs.group, mm_got.group) {
				mmUpdateCardsProgress.t.Errorf("ProgressWriterMock.UpdateCardsProgress got unexpected parameter group, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateCardsProgress.UpdateCardsProgressMock.defaultExpectation.expectationOrigins.originGroup, *mm_want_ptrs.group, mm_got.group, minimock.Diff(*mm_want_ptrs.group, mm_got.group))
			}

			if mm_want_ptrs.cardsProgress != nil && !minimock.Equal(*mm_want_ptrs.cardsProgress, mm_got.cardsProgress) {
				mmUpdateCardsProgress.t.Errorf("ProgressWriterMock.UpdateCardsProgress got unexpected parameter cardsProgress, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmUpdateCardsProgress.UpdateCardsProgressMock.defaultExpectation.expectationOrigins.originCardsProgress, *mm_want_ptrs.cardsProgress, mm_got.cardsProgress, minimock.Diff(*mm_want_ptrs.cardsProgress, mm_got.cardsProgress))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateCardsProgress.t.Errorf("ProgressWriterMock.UpdateCardsProgress got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmUpdateCardsProgress.UpdateCardsProgressMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateCardsProgress.UpdateCardsProgressMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateCardsProgress.t.Fatal("No results are set for the ProgressWriterMock.UpdateCardsProgress")
		}
		return (*mm_results).err
	}
	if mmUpdateCardsProgress.funcUpdateCardsProgress != nil {
		return mmUpdateCardsProgress.funcUpdateCardsProgress(ctx, user, group, cardsProgress)
	}
	mmUpdateCardsProgress.t.Fatalf("Unexpected call to ProgressWriterMock.UpdateCardsProgress. %v %v %v %v", ctx, user, group, cardsProgress)
	return
}

// UpdateCardsProgressAfterCounter returns a count of finished ProgressWriterMock.UpdateCardsProgress invocations
func (mmUpdateCardsProgress *ProgressWriterMock) UpdateCardsProgressAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateCardsProgress.afterUpdateCardsProgressCounter)
}

// UpdateCardsProgressBeforeCounter returns a count of ProgressWriterMock.UpdateCardsProgress invocations
func (mmUpdateCardsProgress *ProgressWriterMock) UpdateCardsProgressBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateCardsProgress.beforeUpdateCardsProgressCounter)
}

// Calls returns a list of arguments used in each call to ProgressWriterMock.UpdateCardsProgress.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateCardsProgress *mProgressWriterMockUpdateCardsProgress) Calls() []*ProgressWriterMockUpdateCardsProgressParams {
	mmUpdateCardsProgress.mutex.RLock()

	argCopy := make([]*ProgressWriterMockUpdateCardsProgressParams, len(mmUpdateCardsProgress.callArgs))
	copy(argCopy, mmUpdateCardsProgress.callArgs)

	mmUpdateCardsProgress.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateCardsProgressDone returns true if the count of the UpdateCardsProgress invocations corresponds
// the number of defined expectations
func (m *ProgressWriterMock) MinimockUpdateCardsProgressDone() bool {
	if m.UpdateCardsProgressMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.UpdateCardsProgressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.UpdateCardsProgressMock.invocationsDone()
}

// MinimockUpdateCardsProgressInspect logs each unmet expectation
func (m *ProgressWriterMock) MinimockUpdateCardsProgressInspect() {
	for _, e := range m.UpdateCardsProgressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProgressWriterMock.UpdateCardsProgress at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterUpdateCardsProgressCounter := mm_atomic.LoadUint64(&m.afterUpdateCardsProgressCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateCardsProgressMock.defaultExpectation != nil && afterUpdateCardsProgressCounter < 1 {
		if m.UpdateCardsProgressMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProgressWriterMock.UpdateCardsProgress at\n%s", m.UpdateCardsProgressMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProgressWriterMock.UpdateCardsProgress at\n%s with params: %#v", m.UpdateCardsProgressMock.defaultExpectation.expectationOrigins.origin, *m.UpdateCardsProgressMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateCardsProgress != nil && afterUpdateCardsProgressCounter < 1 {
		m.t.Errorf("Expected call to ProgressWriterMock.UpdateCardsProgress at\n%s", m.funcUpdateCardsProgressOrigin)
	}

	if !m.UpdateCardsProgressMock.invocationsDone() && afterUpdateCardsProgressCounter > 0 {
		m.t.Errorf("Expected %d calls to ProgressWriterMock.UpdateCardsProgress at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.UpdateCardsProgressMock.expectedInvocations), m.UpdateCardsProgressMock.expectedInvocationsOrigin, afterUpdateCardsProgressCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProgressWriterMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockUpdateCardsProgressInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProgressWriterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProgressWriterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockUpdateCardsProgressDone()
}
