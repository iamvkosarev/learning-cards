// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/iamvkosarev/learning-cards/internal/service.ProgressReader -o progress_reader_mock.go -n ProgressReaderMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/iamvkosarev/learning-cards/internal/domain/entity"
)

// ProgressReaderMock implements mm_service.ProgressReader
type ProgressReaderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetCardsProgress          func(ctx context.Context, user entity.UserId, group entity.GroupId) (ca1 []entity.CardProgress, err error)
	funcGetCardsProgressOrigin    string
	inspectFuncGetCardsProgress   func(ctx context.Context, user entity.UserId, group entity.GroupId)
	afterGetCardsProgressCounter  uint64
	beforeGetCardsProgressCounter uint64
	GetCardsProgressMock          mProgressReaderMockGetCardsProgress
}

// NewProgressReaderMock returns a mock for mm_service.ProgressReader
func NewProgressReaderMock(t minimock.Tester) *ProgressReaderMock {
	m := &ProgressReaderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetCardsProgressMock = mProgressReaderMockGetCardsProgress{mock: m}
	m.GetCardsProgressMock.callArgs = []*ProgressReaderMockGetCardsProgressParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProgressReaderMockGetCardsProgress struct {
	optional           bool
	mock               *ProgressReaderMock
	defaultExpectation *ProgressReaderMockGetCardsProgressExpectation
	expectations       []*ProgressReaderMockGetCardsProgressExpectation

	callArgs []*ProgressReaderMockGetCardsProgressParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProgressReaderMockGetCardsProgressExpectation specifies expectation struct of the ProgressReader.GetCardsProgress
type ProgressReaderMockGetCardsProgressExpectation struct {
	mock               *ProgressReaderMock
	params             *ProgressReaderMockGetCardsProgressParams
	paramPtrs          *ProgressReaderMockGetCardsProgressParamPtrs
	expectationOrigins ProgressReaderMockGetCardsProgressExpectationOrigins
	results            *ProgressReaderMockGetCardsProgressResults
	returnOrigin       string
	Counter            uint64
}

// ProgressReaderMockGetCardsProgressParams contains parameters of the ProgressReader.GetCardsProgress
type ProgressReaderMockGetCardsProgressParams struct {
	ctx   context.Context
	user  entity.UserId
	group entity.GroupId
}

// ProgressReaderMockGetCardsProgressParamPtrs contains pointers to parameters of the ProgressReader.GetCardsProgress
type ProgressReaderMockGetCardsProgressParamPtrs struct {
	ctx   *context.Context
	user  *entity.UserId
	group *entity.GroupId
}

// ProgressReaderMockGetCardsProgressResults contains results of the ProgressReader.GetCardsProgress
type ProgressReaderMockGetCardsProgressResults struct {
	ca1 []entity.CardProgress
	err error
}

// ProgressReaderMockGetCardsProgressOrigins contains origins of expectations of the ProgressReader.GetCardsProgress
type ProgressReaderMockGetCardsProgressExpectationOrigins struct {
	origin      string
	originCtx   string
	originUser  string
	originGroup string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) Optional() *mProgressReaderMockGetCardsProgress {
	mmGetCardsProgress.optional = true
	return mmGetCardsProgress
}

// Expect sets up expected params for ProgressReader.GetCardsProgress
func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) Expect(ctx context.Context, user entity.UserId, group entity.GroupId) *mProgressReaderMockGetCardsProgress {
	if mmGetCardsProgress.mock.funcGetCardsProgress != nil {
		mmGetCardsProgress.mock.t.Fatalf("ProgressReaderMock.GetCardsProgress mock is already set by Set")
	}

	if mmGetCardsProgress.defaultExpectation == nil {
		mmGetCardsProgress.defaultExpectation = &ProgressReaderMockGetCardsProgressExpectation{}
	}

	if mmGetCardsProgress.defaultExpectation.paramPtrs != nil {
		mmGetCardsProgress.mock.t.Fatalf("ProgressReaderMock.GetCardsProgress mock is already set by ExpectParams functions")
	}

	mmGetCardsProgress.defaultExpectation.params = &ProgressReaderMockGetCardsProgressParams{ctx, user, group}
	mmGetCardsProgress.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetCardsProgress.expectations {
		if minimock.Equal(e.params, mmGetCardsProgress.defaultExpectation.params) {
			mmGetCardsProgress.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetCardsProgress.defaultExpectation.params)
		}
	}

	return mmGetCardsProgress
}

// ExpectCtxParam1 sets up expected param ctx for ProgressReader.GetCardsProgress
func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) ExpectCtxParam1(ctx context.Context) *mProgressReaderMockGetCardsProgress {
	if mmGetCardsProgress.mock.funcGetCardsProgress != nil {
		mmGetCardsProgress.mock.t.Fatalf("ProgressReaderMock.GetCardsProgress mock is already set by Set")
	}

	if mmGetCardsProgress.defaultExpectation == nil {
		mmGetCardsProgress.defaultExpectation = &ProgressReaderMockGetCardsProgressExpectation{}
	}

	if mmGetCardsProgress.defaultExpectation.params != nil {
		mmGetCardsProgress.mock.t.Fatalf("ProgressReaderMock.GetCardsProgress mock is already set by Expect")
	}

	if mmGetCardsProgress.defaultExpectation.paramPtrs == nil {
		mmGetCardsProgress.defaultExpectation.paramPtrs = &ProgressReaderMockGetCardsProgressParamPtrs{}
	}
	mmGetCardsProgress.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetCardsProgress.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetCardsProgress
}

// ExpectUserParam2 sets up expected param user for ProgressReader.GetCardsProgress
func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) ExpectUserParam2(user entity.UserId) *mProgressReaderMockGetCardsProgress {
	if mmGetCardsProgress.mock.funcGetCardsProgress != nil {
		mmGetCardsProgress.mock.t.Fatalf("ProgressReaderMock.GetCardsProgress mock is already set by Set")
	}

	if mmGetCardsProgress.defaultExpectation == nil {
		mmGetCardsProgress.defaultExpectation = &ProgressReaderMockGetCardsProgressExpectation{}
	}

	if mmGetCardsProgress.defaultExpectation.params != nil {
		mmGetCardsProgress.mock.t.Fatalf("ProgressReaderMock.GetCardsProgress mock is already set by Expect")
	}

	if mmGetCardsProgress.defaultExpectation.paramPtrs == nil {
		mmGetCardsProgress.defaultExpectation.paramPtrs = &ProgressReaderMockGetCardsProgressParamPtrs{}
	}
	mmGetCardsProgress.defaultExpectation.paramPtrs.user = &user
	mmGetCardsProgress.defaultExpectation.expectationOrigins.originUser = minimock.CallerInfo(1)

	return mmGetCardsProgress
}

// ExpectGroupParam3 sets up expected param group for ProgressReader.GetCardsProgress
func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) ExpectGroupParam3(group entity.GroupId) *mProgressReaderMockGetCardsProgress {
	if mmGetCardsProgress.mock.funcGetCardsProgress != nil {
		mmGetCardsProgress.mock.t.Fatalf("ProgressReaderMock.GetCardsProgress mock is already set by Set")
	}

	if mmGetCardsProgress.defaultExpectation == nil {
		mmGetCardsProgress.defaultExpectation = &ProgressReaderMockGetCardsProgressExpectation{}
	}

	if mmGetCardsProgress.defaultExpectation.params != nil {
		mmGetCardsProgress.mock.t.Fatalf("ProgressReaderMock.GetCardsProgress mock is already set by Expect")
	}

	if mmGetCardsProgress.defaultExpectation.paramPtrs == nil {
		mmGetCardsProgress.defaultExpectation.paramPtrs = &ProgressReaderMockGetCardsProgressParamPtrs{}
	}
	mmGetCardsProgress.defaultExpectation.paramPtrs.group = &group
	mmGetCardsProgress.defaultExpectation.expectationOrigins.originGroup = minimock.CallerInfo(1)

	return mmGetCardsProgress
}

// Inspect accepts an inspector function that has same arguments as the ProgressReader.GetCardsProgress
func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) Inspect(f func(ctx context.Context, user entity.UserId, group entity.GroupId)) *mProgressReaderMockGetCardsProgress {
	if mmGetCardsProgress.mock.inspectFuncGetCardsProgress != nil {
		mmGetCardsProgress.mock.t.Fatalf("Inspect function is already set for ProgressReaderMock.GetCardsProgress")
	}

	mmGetCardsProgress.mock.inspectFuncGetCardsProgress = f

	return mmGetCardsProgress
}

// Return sets up results that will be returned by ProgressReader.GetCardsProgress
func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) Return(ca1 []entity.CardProgress, err error) *ProgressReaderMock {
	if mmGetCardsProgress.mock.funcGetCardsProgress != nil {
		mmGetCardsProgress.mock.t.Fatalf("ProgressReaderMock.GetCardsProgress mock is already set by Set")
	}

	if mmGetCardsProgress.defaultExpectation == nil {
		mmGetCardsProgress.defaultExpectation = &ProgressReaderMockGetCardsProgressExpectation{mock: mmGetCardsProgress.mock}
	}
	mmGetCardsProgress.defaultExpectation.results = &ProgressReaderMockGetCardsProgressResults{ca1, err}
	mmGetCardsProgress.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetCardsProgress.mock
}

// Set uses given function f to mock the ProgressReader.GetCardsProgress method
func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) Set(f func(ctx context.Context, user entity.UserId, group entity.GroupId) (ca1 []entity.CardProgress, err error)) *ProgressReaderMock {
	if mmGetCardsProgress.defaultExpectation != nil {
		mmGetCardsProgress.mock.t.Fatalf("Default expectation is already set for the ProgressReader.GetCardsProgress method")
	}

	if len(mmGetCardsProgress.expectations) > 0 {
		mmGetCardsProgress.mock.t.Fatalf("Some expectations are already set for the ProgressReader.GetCardsProgress method")
	}

	mmGetCardsProgress.mock.funcGetCardsProgress = f
	mmGetCardsProgress.mock.funcGetCardsProgressOrigin = minimock.CallerInfo(1)
	return mmGetCardsProgress.mock
}

// When sets expectation for the ProgressReader.GetCardsProgress which will trigger the result defined by the following
// Then helper
func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) When(ctx context.Context, user entity.UserId, group entity.GroupId) *ProgressReaderMockGetCardsProgressExpectation {
	if mmGetCardsProgress.mock.funcGetCardsProgress != nil {
		mmGetCardsProgress.mock.t.Fatalf("ProgressReaderMock.GetCardsProgress mock is already set by Set")
	}

	expectation := &ProgressReaderMockGetCardsProgressExpectation{
		mock:               mmGetCardsProgress.mock,
		params:             &ProgressReaderMockGetCardsProgressParams{ctx, user, group},
		expectationOrigins: ProgressReaderMockGetCardsProgressExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetCardsProgress.expectations = append(mmGetCardsProgress.expectations, expectation)
	return expectation
}

// Then sets up ProgressReader.GetCardsProgress return parameters for the expectation previously defined by the When method
func (e *ProgressReaderMockGetCardsProgressExpectation) Then(ca1 []entity.CardProgress, err error) *ProgressReaderMock {
	e.results = &ProgressReaderMockGetCardsProgressResults{ca1, err}
	return e.mock
}

// Times sets number of times ProgressReader.GetCardsProgress should be invoked
func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) Times(n uint64) *mProgressReaderMockGetCardsProgress {
	if n == 0 {
		mmGetCardsProgress.mock.t.Fatalf("Times of ProgressReaderMock.GetCardsProgress mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetCardsProgress.expectedInvocations, n)
	mmGetCardsProgress.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetCardsProgress
}

func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) invocationsDone() bool {
	if len(mmGetCardsProgress.expectations) == 0 && mmGetCardsProgress.defaultExpectation == nil && mmGetCardsProgress.mock.funcGetCardsProgress == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetCardsProgress.mock.afterGetCardsProgressCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetCardsProgress.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetCardsProgress implements mm_service.ProgressReader
func (mmGetCardsProgress *ProgressReaderMock) GetCardsProgress(ctx context.Context, user entity.UserId, group entity.GroupId) (ca1 []entity.CardProgress, err error) {
	mm_atomic.AddUint64(&mmGetCardsProgress.beforeGetCardsProgressCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCardsProgress.afterGetCardsProgressCounter, 1)

	mmGetCardsProgress.t.Helper()

	if mmGetCardsProgress.inspectFuncGetCardsProgress != nil {
		mmGetCardsProgress.inspectFuncGetCardsProgress(ctx, user, group)
	}

	mm_params := ProgressReaderMockGetCardsProgressParams{ctx, user, group}

	// Record call args
	mmGetCardsProgress.GetCardsProgressMock.mutex.Lock()
	mmGetCardsProgress.GetCardsProgressMock.callArgs = append(mmGetCardsProgress.GetCardsProgressMock.callArgs, &mm_params)
	mmGetCardsProgress.GetCardsProgressMock.mutex.Unlock()

	for _, e := range mmGetCardsProgress.GetCardsProgressMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ca1, e.results.err
		}
	}

	if mmGetCardsProgress.GetCardsProgressMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCardsProgress.GetCardsProgressMock.defaultExpectation.Counter, 1)
		mm_want := mmGetCardsProgress.GetCardsProgressMock.defaultExpectation.params
		mm_want_ptrs := mmGetCardsProgress.GetCardsProgressMock.defaultExpectation.paramPtrs

		mm_got := ProgressReaderMockGetCardsProgressParams{ctx, user, group}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetCardsProgress.t.Errorf("ProgressReaderMock.GetCardsProgress got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCardsProgress.GetCardsProgressMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmGetCardsProgress.t.Errorf("ProgressReaderMock.GetCardsProgress got unexpected parameter user, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCardsProgress.GetCardsProgressMock.defaultExpectation.expectationOrigins.originUser, *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

			if mm_want_ptrs.group != nil && !minimock.Equal(*mm_want_ptrs.group, mm_got.group) {
				mmGetCardsProgress.t.Errorf("ProgressReaderMock.GetCardsProgress got unexpected parameter group, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetCardsProgress.GetCardsProgressMock.defaultExpectation.expectationOrigins.originGroup, *mm_want_ptrs.group, mm_got.group, minimock.Diff(*mm_want_ptrs.group, mm_got.group))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetCardsProgress.t.Errorf("ProgressReaderMock.GetCardsProgress got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetCardsProgress.GetCardsProgressMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetCardsProgress.GetCardsProgressMock.defaultExpectation.results
		if mm_results == nil {
			mmGetCardsProgress.t.Fatal("No results are set for the ProgressReaderMock.GetCardsProgress")
		}
		return (*mm_results).ca1, (*mm_results).err
	}
	if mmGetCardsProgress.funcGetCardsProgress != nil {
		return mmGetCardsProgress.funcGetCardsProgress(ctx, user, group)
	}
	mmGetCardsProgress.t.Fatalf("Unexpected call to ProgressReaderMock.GetCardsProgress. %v %v %v", ctx, user, group)
	return
}

// GetCardsProgressAfterCounter returns a count of finished ProgressReaderMock.GetCardsProgress invocations
func (mmGetCardsProgress *ProgressReaderMock) GetCardsProgressAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCardsProgress.afterGetCardsProgressCounter)
}

// GetCardsProgressBeforeCounter returns a count of ProgressReaderMock.GetCardsProgress invocations
func (mmGetCardsProgress *ProgressReaderMock) GetCardsProgressBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCardsProgress.beforeGetCardsProgressCounter)
}

// Calls returns a list of arguments used in each call to ProgressReaderMock.GetCardsProgress.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetCardsProgress *mProgressReaderMockGetCardsProgress) Calls() []*ProgressReaderMockGetCardsProgressParams {
	mmGetCardsProgress.mutex.RLock()

	argCopy := make([]*ProgressReaderMockGetCardsProgressParams, len(mmGetCardsProgress.callArgs))
	copy(argCopy, mmGetCardsProgress.callArgs)

	mmGetCardsProgress.mutex.RUnlock()

	return argCopy
}

// MinimockGetCardsProgressDone returns true if the count of the GetCardsProgress invocations corresponds
// the number of defined expectations
func (m *ProgressReaderMock) MinimockGetCardsProgressDone() bool {
	if m.GetCardsProgressMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetCardsProgressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetCardsProgressMock.invocationsDone()
}

// MinimockGetCardsProgressInspect logs each unmet expectation
func (m *ProgressReaderMock) MinimockGetCardsProgressInspect() {
	for _, e := range m.GetCardsProgressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProgressReaderMock.GetCardsProgress at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCardsProgressCounter := mm_atomic.LoadUint64(&m.afterGetCardsProgressCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetCardsProgressMock.defaultExpectation != nil && afterGetCardsProgressCounter < 1 {
		if m.GetCardsProgressMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProgressReaderMock.GetCardsProgress at\n%s", m.GetCardsProgressMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProgressReaderMock.GetCardsProgress at\n%s with params: %#v", m.GetCardsProgressMock.defaultExpectation.expectationOrigins.origin, *m.GetCardsProgressMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCardsProgress != nil && afterGetCardsProgressCounter < 1 {
		m.t.Errorf("Expected call to ProgressReaderMock.GetCardsProgress at\n%s", m.funcGetCardsProgressOrigin)
	}

	if !m.GetCardsProgressMock.invocationsDone() && afterGetCardsProgressCounter > 0 {
		m.t.Errorf("Expected %d calls to ProgressReaderMock.GetCardsProgress at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetCardsProgressMock.expectedInvocations), m.GetCardsProgressMock.expectedInvocationsOrigin, afterGetCardsProgressCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProgressReaderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetCardsProgressInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProgressReaderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProgressReaderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetCardsProgressDone()
}
